{"version":3,"file":"player.886b435187784e02c355.js","mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEa;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB;;AAEnB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,sBAAsB;AACxC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe;AACf;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;;AAEA,kCAAkC,QAAQ;AAC1C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,QAAQ;AACR;AACA,uCAAuC,QAAQ;AAC/C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,OAAO;AACzB;AACA;AACA;;AAEA;AACA,SAAS,yBAAyB;AAClC;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,gBAAgB;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,8DAA8D,YAAY;AAC1E;AACA,8DAA8D,YAAY;AAC1E;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,qCAAqC,YAAY;AACjD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI;AACJ;AACA;AACA;;;;;;;;;;;;AChfa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB;AACA;AACA,oCAAoC,WAAW;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,0BAA0B;AAC3E;AACA;AACA,iDAAiD,2BAA2B;AAC5E;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,IAAI;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,WAAW;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,UAAU;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,WAAW;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,MAAM;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,MAAM;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,WAAW;AACnD;AACA;AACA;AACA,4EAA4E,MAAM;AAClF;AACA;AACA;AACA,4EAA4E,MAAM;AAClF;AACA;AACA;AACA;AACA,gEAAgE,eAAe;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAe;AACf;;;;;;;;;;;ACnZa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,YAAY,GAAG,eAAe,GAAG,wBAAwB;AACzD,2BAA2B,mBAAO,CAAC,oFAAoB;AACvD,wBAAwB;AACxB,kBAAkB,mBAAO,CAAC,sFAAqB;AAC/C,2CAA0C,EAAE,qCAAqC,6BAA6B,EAAC;AAC/G,YAAY;AACZ;AACA;AACA;AACA;;;;;;;;;;;ACXa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,eAAe;AACf,2BAA2B,mBAAO,CAAC,qFAAqB;AACxD;AACA;AACA;AACA;AACA,2DAA2D,SAAS,aAAa,uBAAuB;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,SAAS;AAC5E;AACA;AACA;AACA;AACA,mDAAmD,eAAe,EAAE,uBAAuB;AAC3F;AACA;AACA;AACA;AACA;AACA,kDAAkD,eAAe,EAAE,uBAAuB;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,cAAc,EAAE,sBAAsB;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,EAAE,YAAY;AACzD;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,mDAAmD,YAAY,EAAE,oBAAoB;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,eAAe,EAAE,uBAAuB;AACpG;AACA;AACA;AACA;AACA;AACA,mDAAmD,eAAe,EAAE,uBAAuB;AAC3F;AACA;AACA;AACA;AACA;AACA,iDAAiD,eAAe,EAAE,uBAAuB;AACzF;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,KAAK;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,QAAQ;AACxaAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,gCAAgC,WAAW;AAC3C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,mCAAmC,cAAc,cAAc;AAC/D,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,EAAE,YAAY;AACnE;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;;;;;;;;;;;ACzrCA;;;;;;;;;;;ACAA;AACA,cAAc,mBAAO,CAAC,kEAAyB;AAC/C,iBAAiB,mBAAO,CAAC,2DAAoB;AAC7C,mBAAO,CAAC,qFAAiC;AACzC,eAAe,mBAAO,CAAC,uDAAkB;AACzC,yBAAyB,mBAAO,CAAC,6EAA6B;AAC9D,wBAAwB,mBAAO,CAAC,2EAA4B;AAC5D,6BAA6B,mBAAO,CAAC,uFAAkC;AACvE,wBAAwB,mBAAO,CAAC,yEAA2B;AAC3D,wBAAwB,mBAAO,CAAC,iFAA+B;AAC/D,0BAA0B,mBAAO,CAAC,qFAAiC;;AAEnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,oDAAoD,2BAA2B;;AAE/E;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA,sCAAsC,0DAA0D;AAChG;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,+BAA+B;;AAE/B;;;;;;;;;;;ACxIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;AChDA,oBAAoB,mBAAO,CAAC,8DAAgB;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,UAAU;AACvB,aAAa,kCAAkC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wFAAwF,mBAAmB,GAAG,sBAAsB;AACpI;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,sBAAsB,GAAG,mBAAmB,GAAG,sBAAsB;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,iFAAiF,qBAAqB,GAAG,sBAAsB;AAC/H;;AAEA;AACA;AACA,8CAA8C,YAAY,GAAG,mBAAmB,GAAG,sBAAsB;AACzG;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA,6CAA6C,QAAQ,iBAAiB,gBAAgB,GAAG,sBAAsB;AAC/G;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,oDAAoD,WAAW,GAAG,mBAAmB,GAAG,sBAAsB,KAAK,UAAU;AAC7H;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;AChTA,qBAAqB,mBAAO,CAAC,+CAAQ;AACrC,wBAAwB,mBAAO,CAAC,sEAAoB;AACpD,mBAAmB,mBAAO,CAAC,4DAAe;;AAE1C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,+BAA+B,cAAc;AAC7C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;AClGO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;;;;;;;;;;AChGA,qBAAqB,mBAAO,CAAC,+CAAQ;AACrC,yBAAyB,mBAAO,CAAC,wEAAqB;AACtD,QAAQ,6BAA6B,EAAE,mBAAO,CAAC,wFAA6B;;AAE5E;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oBAAoB,cAAc;AAC7D,KAAK;AACL;AACA;;AAEA;AACA,YAAY,mBAAmB;;AAE/B;AACA;AACA;AACA,QAAQ;AACR;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;ACxEA,QAAQ,mBAAmB,EAAE,mBAAO,CAAC,uEAAkB;AACvD,uBAAuB,mBAAO,CAAC,4EAAwC;;AAEvE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2CAA2C,wBAAwB;AACnE;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,KAAK;AAC1C;AACA;;AAEA;;;;;;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mBAAO,CAAC,+CAAQ;;AAErC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,aAAa;AAC1B,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,aAAa;AAC1B,gBAAgB,SAAS;AACzB,mBAAmB,QAAQ;AAC3B,gBAAgB,OAAO;AACvB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,cAAc,QAAQ;AACtB,eAAe,QAAQ;AACvB,gBAAgB,OAAO;AACvB,aAAa,SAAS;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;AC9JA;AACA;AACA;AACA;AACA,mBAAmB,aAAa;AAChC,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA,CAAC;;;;;;;;;;;ACvBD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C;;AAE5C;AACA,gCAAgC,OAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,6BAA6B,mBAAmB,EAAE,WAAW,GAAG,qBAAqB,GAAG,qBAAqB;AAC7G;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mDAAmD,MAAM,OAAO,eAAe,YAAY;AAC3F;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;;;;;ACrLA;AACA;AACA;;AAEA;;;;;;;;;;;ACJA,qBAAqB,mBAAO,CAAC,+CAAQ;;AAErC;AACA,gBAAgB,kBAAkB;AAClC;AACA,aAAa,mDAAmD;AAChE;;AAEA;AACA,cAAc,OAAO,iCAAiC,WAAW,oCAAoC;AACrG;;AAEA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,sBAAsB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,cAAc,IAAI,WAAW;AAClE;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI,6BAA6B;AACjC;AACA;AACA;AACA;AACA;AACA,aAAa,qBAAqB;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,qBAAqB;AAClC,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,SAAS;AACtB,eAAe;AACf;AACA;AACA,sBAAsB,sBAAsB;AAC5C;AACA;AACA;AACA;;AAEA;;;;;;;;;;;AC1PA,qBAAqB,mBAAO,CAAC,+CAAQ;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;AChFA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;ACtDA,QAAQ,kDAAkD,EAAE,mBAAO,CAAC,0FAAgC;;AAEpG;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;ACdA,cAAc,mBAAO,CAAC,uDAAkB;;AAExC;AACA;AACA;AACA;AACA;AACA,kEAAkE,QAAQ;AAC1E;AACA;;AAEA,sBAAsB;AACtB,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;AChCA,aAAa,mBAAO,CAAC,8FAAiD;;AAEtE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;ACnEA;AACA,qBAAqB,mBAAO,CAAC,+CAAQ;;AAErC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iCAAiC,SAAS;AAC1C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,gDAAgD,uBAAuB;AACvE;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,QAAQ;AACxC;AACA,8BAA8B,UAAU;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,iDAAiD,aAAa;AAC9D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,8CAA8C,uBAAuB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;ACjKA;AACA,oCAAoC,IAAI;AACxC;;AAEA;AACA,gDAAgD,IAAI;AACpD;;AAEA;AACA,gDAAgD,IAAI;AACpD;;AAEA;AACA,qCAAqC,iBAAW;AAChD,eAAe,iBAAW;AAC1B,eAAe,MAA2B,IAAI,CAAoB;AAClE,kDAAkD,iBAAW;;AAE7D,YAAY,SAAS,IAAI,KAAK,GAAG,KAAK,EAAE,KAAK;AAC7C;;AAEA;AACA,qCAAqC,iBAAW;AAChD,eAAe,iBAAW;AAC1B,eAAe,MAA8B,IAAI,CAAoB;AACrE,kDAAkD,iBAAW;;AAE7D,YAAY,SAAS,IAAI,KAAK,GAAG,KAAK,EAAE,KAAK;AAC7C;;AAEA;AACA;AACA;AACA;;;;;;;;;;;ACjCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA,mFAAmF,aAAa,EAAE,OAAO;AACzG;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,wCAAwC;AAC9D;AACA;AACA,wBAAwB,yDAAyD;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;AC1IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCjDA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;;;;;;ACfA,8BAA8B,mBAAO,CAAC,sFAAmC;AACzE,4BAA4B,mBAAO,CAAC,kFAAiC;AACrE,uBAAuB,mBAAO,CAAC,8EAA+B;AAC9D,mBAAO,CAAC,qDAAsB;AAC9B,kBAAkB,mBAAO,CAAC,0EAA6B;AACvD,QAAQ,sCAAsC,EAAE,mBAAO,CAAC,4DAAsB;;AAE9E;AACA;AACA;AACA,qBAAqB,kBAAkB;;AAEvC,mBAAmB,mBAAmB;AACtC;AACA;AACA,8CAA8C,iBAAiB;AAC/D;AACA;AACA,GAAG;AACH;AACA;AACA,wDAAwD,UAAU;AAClE,uDAAuD,UAAU;AACjE;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG","sources":["webpack://future-democracy/./node_modules/events/events.js","webpack://future-democracy/./node_modules/expressionparser/dist/ExpressionParser.js","webpack://future-democracy/./node_modules/expressionparser/dist/index.js","webpack://future-democracy/./node_modules/expressionparser/dist/languages/formula.js","webpack://future-democracy/./src/sass/default.scss?bcb6","webpack://future-democracy/./src/js/lib/components/player-app.js","webpack://future-democracy/./src/js/lib/dialogues/dialogue-balloon.js","webpack://future-democracy/./src/js/lib/dialogues/dialogue-iterator.js","webpack://future-democracy/./src/js/lib/dialogues/dialogue-overlay.js","webpack://future-democracy/./src/js/lib/dialogues/dialogue-sequencer-states.js","webpack://future-democracy/./src/js/lib/dialogues/dialogue-sequencer.js","webpack://future-democracy/./src/js/lib/dialogues/logic-parser.js","webpack://future-democracy/./src/js/lib/dialogues/speech-text.js","webpack://future-democracy/./src/js/lib/helpers-web/fill-with-aspect.js","webpack://future-democracy/./src/js/lib/helpers-web/stats.js","webpack://future-democracy/./src/js/lib/helpers/clone.js","webpack://future-democracy/./src/js/lib/input/gamepad-input-mgr.js","webpack://future-democracy/./src/js/lib/input/keyboard-input-mgr.js","webpack://future-democracy/./src/js/lib/input/player-app-input-connections.js","webpack://future-democracy/./src/js/lib/input/player-app-input-router.js","webpack://future-democracy/./src/js/lib/loader/show-fatal-error.js","webpack://future-democracy/./src/js/lib/model/player-character.js","webpack://future-democracy/./src/js/lib/net/connection-state-view.js","webpack://future-democracy/./src/js/lib/net/server-socket-connector.js","webpack://future-democracy/./src/js/lib/net/server-url.js","webpack://future-democracy/./src/js/lib/views/pc-view.js","webpack://future-democracy/./src/js/lib/views/town-view.js","webpack://future-democracy/webpack/bootstrap","webpack://future-democracy/webpack/runtime/define property getters","webpack://future-democracy/webpack/runtime/global","webpack://future-democracy/webpack/runtime/hasOwnProperty shorthand","webpack://future-democracy/webpack/runtime/make namespace object","webpack://future-democracy/webpack/runtime/publicPath","webpack://future-democracy/./src/js/player.js"],"sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isArgumentsArray = void 0;\nconst isInArray = (array, value) => {\n    let i, len;\n    for (i = 0, len = array.length; i !== len; ++i) {\n        if (array[i] === value) {\n            return true;\n        }\n    }\n    return false;\n};\nconst mapValues = (mapper) => (obj) => {\n    const result = {};\n    Object.keys(obj).forEach((key) => {\n        result[key] = mapper(obj[key]);\n    });\n    return result;\n};\nconst convertKeys = (converter) => (obj) => {\n    const newKeys = Object.keys(obj)\n        .map((key) => (obj.hasOwnProperty(key) ? [key, converter(key)] : null))\n        .filter((val) => val != null);\n    newKeys.forEach(([oldKey, newKey]) => {\n        if (oldKey !== newKey) {\n            obj[newKey] = obj[oldKey];\n            delete obj[oldKey];\n        }\n    });\n    return obj;\n};\nexports.isArgumentsArray = (args) => Array.isArray(args) && args.isArgumentsArray;\nconst thunkEvaluator = (val) => evaluate(val);\nconst objEvaluator = mapValues(thunkEvaluator);\nconst evaluate = (thunkExpression) => {\n    if (typeof thunkExpression === \"function\" && thunkExpression.length === 0) {\n        return evaluate(thunkExpression());\n    }\n    else if (exports.isArgumentsArray(thunkExpression)) {\n        return thunkExpression.map((val) => evaluate(val()));\n    }\n    else if (Array.isArray(thunkExpression)) {\n        return thunkExpression.map(thunkEvaluator);\n    }\n    else if (typeof thunkExpression === \"object\") {\n        return objEvaluator(thunkExpression);\n    }\n    else {\n        return thunkExpression;\n    }\n};\nconst thunk = (delegate, ...args) => () => delegate(...args);\n;\nclass ExpressionParser {\n    constructor(options) {\n        this.options = options;\n        this.surroundingOpen = {};\n        this.surroundingClose = {};\n        if (this.options.SURROUNDING) {\n            Object.keys(this.options.SURROUNDING).forEach((key) => {\n                const item = this.options.SURROUNDING[key];\n                let open = item.OPEN;\n                let close = item.CLOSE;\n                if (this.options.isCaseInsensitive) {\n                    key = key.toUpperCase();\n                    open = open.toUpperCase();\n                    close = close.toUpperCase();\n                }\n                this.surroundingOpen[open] = true;\n                this.surroundingClose[close] = {\n                    OPEN: open,\n                    ALIAS: key,\n                };\n            });\n        }\n        if (this.options.isCaseInsensitive) {\n            // convert all terms to uppercase\n            const upperCaser = (key) => key.toUpperCase();\n            const upperCaseKeys = convertKeys(upperCaser);\n            const upperCaseVals = mapValues(upperCaser);\n            upperCaseKeys(this.options.INFIX_OPS);\n            upperCaseKeys(this.options.PREFIX_OPS);\n            upperCaseKeys(this.options.AMBIGUOUS);\n            upperCaseVals(this.options.AMBIGUOUS);\n            this.options.PRECEDENCE = this.options.PRECEDENCE.map((arr) => arr.map((val) => val.toUpperCase()));\n        }\n        if (this.options.LITERAL_OPEN) {\n            this.LIT_CLOSE_REGEX = new RegExp(`${this.options.LITERAL_OPEN}\\$`);\n        }\n        if (this.options.LITERAL_CLOSE) {\n            this.LIT_OPEN_REGEX = new RegExp(`^${this.options.LITERAL_CLOSE}`);\n        }\n        this.symbols = {};\n        this.options.SYMBOLS.forEach((symbol) => {\n            this.symbols[symbol] = symbol;\n        });\n    }\n    resolveCase(key) {\n        return this.options.isCaseInsensitive ? key.toUpperCase() : key;\n    }\n    resolveAmbiguity(token) {\n        return this.options.AMBIGUOUS[this.resolveCase(token)];\n    }\n    isSymbol(char) {\n        return this.symbols[char] === char;\n    }\n    getPrefixOp(op) {\n        if (this.options.termTyper && this.options.termTyper(op) === \"function\") {\n            const termValue = this.options.termDelegate(op);\n            if (typeof termValue !== \"function\") {\n                throw new Error(`${op} is not a function.`);\n            }\n            const result = termValue;\n            return (argsThunk) => {\n                const args = evaluate(argsThunk);\n                if (!Array.isArray(args)) {\n                    return () => result(args);\n                }\n                else {\n                    return () => result(...args);\n                }\n            };\n        }\n        return this.options.PREFIX_OPS[this.resolveCase(op)];\n    }\n    getInfixOp(op) {\n        return this.options.INFIX_OPS[this.resolveCase(op)];\n    }\n    getPrecedence(op) {\n        let i, len, casedOp;\n        if (this.options.termTyper && this.options.termTyper(op) === \"function\") {\n            return 0;\n        }\n        casedOp = this.resolveCase(op);\n        for (i = 0, len = this.options.PRECEDENCE.length; i !== len; ++i) {\n            if (isInArray(this.options.PRECEDENCE[i], casedOp)) {\n                return i;\n            }\n        }\n        return i;\n    }\n    tokenize(expression) {\n        let token = \"\";\n        const EOF = 0;\n        const tokens = [];\n        const state = {\n            startedWithSep: true,\n            scanningLiteral: false,\n            scanningSymbols: false,\n            escaping: false,\n        };\n        const endWord = (endedWithSep) => {\n            if (token !== \"\") {\n                const disambiguated = this.resolveAmbiguity(token);\n                if (disambiguated && state.startedWithSep && !endedWithSep) {\n                    // ambiguous operator is nestled with the RHS\n                    // treat it as a prefix operator\n                    tokens.push(disambiguated);\n                }\n                else {\n                    // TODO: break apart joined surroundingOpen/Close\n                    tokens.push(token);\n                }\n                token = \"\";\n                state.startedWithSep = false;\n            }\n        };\n        const chars = expression.split(\"\");\n        let currChar;\n        let i, len;\n        for (i = 0, len = chars.length; i <= len; ++i) {\n            if (i === len) {\n                currChar = EOF;\n            }\n            else {\n                currChar = chars[i];\n            }\n            if (currChar === this.options.ESCAPE_CHAR && !state.escaping) {\n                state.escaping = true;\n                continue;\n            }\n            else if (state.escaping) {\n                token += currChar;\n            }\n            else if (currChar === this.options.LITERAL_OPEN &&\n                !state.scanningLiteral) {\n                state.scanningLiteral = true;\n                endWord(false);\n            }\n            else if (currChar === this.options.LITERAL_CLOSE) {\n                state.scanningLiteral = false;\n                tokens.push(this.options.LITERAL_OPEN + token + this.options.LITERAL_CLOSE);\n                token = \"\";\n            }\n            else if (currChar === EOF) {\n                endWord(true);\n            }\n            else if (state.scanningLiteral) {\n                token += currChar;\n            }\n            else if (currChar === this.options.SEPARATOR) {\n                endWord(true);\n                state.startedWithSep = true;\n            }\n            else if (currChar === this.options.GROUP_OPEN ||\n                currChar === this.options.GROUP_CLOSE) {\n                endWord(currChar === this.options.GROUP_CLOSE);\n                state.startedWithSep = currChar === this.options.GROUP_OPEN;\n                tokens.push(currChar);\n            }\n            else if (currChar in this.surroundingOpen ||\n                currChar in this.surroundingClose) {\n                endWord(currChar in this.surroundingClose);\n                state.startedWithSep = currChar in this.surroundingOpen;\n                tokens.push(currChar);\n            }\n            else if ((this.isSymbol(currChar) && !state.scanningSymbols) ||\n                (!this.isSymbol(currChar) && state.scanningSymbols)) {\n                endWord(false);\n                token += currChar;\n                state.scanningSymbols = !state.scanningSymbols;\n            }\n            else {\n                token += currChar;\n            }\n            state.escaping = false;\n        }\n        return tokens;\n    }\n    tokensToRpn(tokens) {\n        let token;\n        let i, len;\n        let isInfix, isPrefix, surroundingToken, lastInStack, tokenPrecedence;\n        const output = [];\n        const stack = [];\n        const grouping = [];\n        for (i = 0, len = tokens.length; i !== len; ++i) {\n            token = tokens[i];\n            isInfix = typeof this.getInfixOp(token) !== \"undefined\";\n            isPrefix = typeof this.getPrefixOp(token) !== \"undefined\";\n            if (isInfix || isPrefix) {\n                tokenPrecedence = this.getPrecedence(token);\n                lastInStack = stack[stack.length - 1];\n                while (lastInStack &&\n                    ((!!this.getPrefixOp(lastInStack) &&\n                        this.getPrecedence(lastInStack) < tokenPrecedence) ||\n                        (!!this.getInfixOp(lastInStack) &&\n                            this.getPrecedence(lastInStack) <= tokenPrecedence))) {\n                    output.push(stack.pop());\n                    lastInStack = stack[stack.length - 1];\n                }\n                stack.push(token);\n            }\n            else if (this.surroundingOpen[token]) {\n                stack.push(token);\n                grouping.push(token);\n            }\n            else if (this.surroundingClose[token]) {\n                surroundingToken = this.surroundingClose[token];\n                if (grouping.pop() !== surroundingToken.OPEN) {\n                    throw new Error(`Mismatched Grouping (unexpected closing \"${token}\")`);\n                }\n                token = stack.pop();\n                while (token !== surroundingToken.OPEN &&\n                    typeof token !== \"undefined\") {\n                    output.push(token);\n                    token = stack.pop();\n                }\n                if (typeof token === \"undefined\") {\n                    throw new Error(\"Mismatched Grouping\");\n                }\n                stack.push(surroundingToken.ALIAS);\n            }\n            else if (token === this.options.GROUP_OPEN) {\n                stack.push(token);\n                grouping.push(token);\n            }\n            else if (token === this.options.GROUP_CLOSE) {\n                if (grouping.pop() !== this.options.GROUP_OPEN) {\n                    throw new Error(`Mismatched Grouping (unexpected closing \"${token}\")`);\n                }\n                token = stack.pop();\n                while (token !== this.options.GROUP_OPEN &&\n                    typeof token !== \"undefined\") {\n                    output.push(token);\n                    token = stack.pop();\n                }\n                if (typeof token === \"undefined\") {\n                    throw new Error(\"Mismatched Grouping\");\n                }\n            }\n            else {\n                output.push(token);\n            }\n        }\n        for (i = 0, len = stack.length; i !== len; ++i) {\n            token = stack.pop();\n            surroundingToken = this.surroundingClose[token];\n            if (surroundingToken && grouping.pop() !== surroundingToken.OPEN) {\n                throw new Error(`Mismatched Grouping (unexpected closing \"${token}\")`);\n            }\n            else if (token === this.options.GROUP_CLOSE &&\n                grouping.pop() !== this.options.GROUP_OPEN) {\n                throw new Error(`Mismatched Grouping (unexpected closing \"${token}\")`);\n            }\n            output.push(token);\n        }\n        if (grouping.length !== 0) {\n            throw new Error(`Mismatched Grouping (unexpected \"${grouping.pop()}\")`);\n        }\n        return output;\n    }\n    evaluateRpn(stack, infixer, prefixer, terminator, terms) {\n        let lhs, rhs;\n        const token = stack.pop();\n        if (typeof token === \"undefined\") {\n            throw new Error(\"Parse Error: unexpected EOF\");\n        }\n        const infixDelegate = this.getInfixOp(token);\n        const prefixDelegate = this.getPrefixOp(token);\n        const isInfix = infixDelegate && stack.length > 1;\n        const isPrefix = prefixDelegate && stack.length > 0;\n        if (isInfix || isPrefix) {\n            rhs = this.evaluateRpn(stack, infixer, prefixer, terminator, terms);\n        }\n        if (isInfix) {\n            lhs = this.evaluateRpn(stack, infixer, prefixer, terminator, terms);\n            return infixer(token, lhs, rhs);\n        }\n        else if (isPrefix) {\n            return prefixer(token, rhs);\n        }\n        else {\n            return terminator(token, terms);\n        }\n    }\n    rpnToExpression(stack) {\n        const infixExpr = (term, lhs, rhs) => this.options.GROUP_OPEN +\n            lhs +\n            this.options.SEPARATOR +\n            term +\n            this.options.SEPARATOR +\n            rhs +\n            this.options.GROUP_CLOSE;\n        const prefixExpr = (term, rhs) => (this.isSymbol(term) ? term : term + this.options.SEPARATOR) +\n            this.options.GROUP_OPEN +\n            rhs +\n            this.options.GROUP_CLOSE;\n        const termExpr = (term) => term;\n        return this.evaluateRpn(stack, infixExpr, prefixExpr, termExpr);\n    }\n    rpnToTokens(stack) {\n        const infixExpr = (term, lhs, rhs) => [this.options.GROUP_OPEN]\n            .concat(lhs)\n            .concat([term])\n            .concat(rhs)\n            .concat([this.options.GROUP_CLOSE]);\n        const prefixExpr = (term, rhs) => [term, this.options.GROUP_OPEN]\n            .concat(rhs)\n            .concat([this.options.GROUP_CLOSE]);\n        const termExpr = (term) => [term];\n        return this.evaluateRpn(stack, infixExpr, prefixExpr, termExpr);\n    }\n    rpnToThunk(stack, terms) {\n        const infixExpr = (term, lhs, rhs) => thunk(this.getInfixOp(term), lhs, rhs);\n        const prefixExpr = (term, rhs) => thunk(this.getPrefixOp(term), rhs);\n        const termExpr = (term, terms) => {\n            if (this.options.LITERAL_OPEN &&\n                term.startsWith(this.options.LITERAL_OPEN)) {\n                // Literal string\n                return () => term\n                    .replace(this.LIT_OPEN_REGEX, \"\")\n                    .replace(this.LIT_CLOSE_REGEX, \"\");\n            }\n            else {\n                return (terms && term in terms) ? (() => terms[term]) : thunk(this.options.termDelegate, term);\n            }\n        };\n        return this.evaluateRpn(stack, infixExpr, prefixExpr, termExpr, terms);\n    }\n    rpnToValue(stack, terms) {\n        return evaluate(this.rpnToThunk(stack, terms));\n    }\n    thunkToValue(thunk) {\n        return evaluate(thunk);\n    }\n    expressionToRpn(expression) {\n        return this.tokensToRpn(this.tokenize(expression));\n    }\n    expressionToThunk(expression, terms) {\n        return this.rpnToThunk(this.expressionToRpn(expression), terms);\n    }\n    expressionToValue(expression, terms) {\n        return this.rpnToValue(this.expressionToRpn(expression), terms);\n    }\n    tokensToValue(tokens) {\n        return this.rpnToValue(this.tokensToRpn(tokens));\n    }\n    tokensToThunk(tokens) {\n        return this.rpnToThunk(this.tokensToRpn(tokens));\n    }\n}\nexports.default = ExpressionParser;\n//# sourceMappingURL=ExpressionParser.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.init = exports.formula = exports.ExpressionParser = void 0;\nconst ExpressionParser_1 = require(\"./ExpressionParser\");\nexports.ExpressionParser = ExpressionParser_1.default;\nconst formula_1 = require(\"./languages/formula\");\nObject.defineProperty(exports, \"formula\", { enumerable: true, get: function () { return formula_1.formula; } });\nexports.init = (language, evalTerm, typeTerm) => {\n    const defn = language(evalTerm, typeTerm);\n    return new ExpressionParser_1.default(defn);\n};\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.formula = void 0;\nconst ExpressionParser_1 = require(\"../ExpressionParser\");\nconst unpackArgs = (f) => (expr) => {\n    const result = expr();\n    if (!ExpressionParser_1.isArgumentsArray(result)) {\n        if (f.length > 1) {\n            throw new Error(`Too few arguments. Expected ${f.length}, found 1 (${JSON.stringify(result)})`);\n        }\n        return f(() => result);\n    }\n    else if (result.length === f.length || f.length === 0) {\n        return f.apply(null, result);\n    }\n    else {\n        throw new Error(`Incorrect number of arguments. Expected ${f.length}`);\n    }\n};\nconst num = (result) => {\n    if (typeof result !== \"number\") {\n        throw new Error(`Expected number, found: ${typeof result} ${JSON.stringify(result)}`);\n    }\n    return result;\n};\nconst array = (result) => {\n    if (!Array.isArray(result)) {\n        throw new Error(`Expected array, found: ${typeof result} ${JSON.stringify(result)}`);\n    }\n    if (ExpressionParser_1.isArgumentsArray(result)) {\n        throw new Error(`Expected array, found: arguments`);\n    }\n    return result;\n};\nconst bool = (value) => {\n    if (typeof value !== \"boolean\") {\n        throw new Error(`Expected boolean, found: ${typeof value} ${JSON.stringify(value)}`);\n    }\n    return value;\n};\nconst evalBool = (value) => {\n    let result;\n    while (typeof value === \"function\" && value.length === 0) {\n        result = value();\n    }\n    if (!result) {\n        result = value;\n    }\n    return bool(result);\n};\nconst evalString = (value) => {\n    let result;\n    if (typeof value === \"function\" && value.length === 0) {\n        result = value();\n    }\n    else {\n        result = value;\n    }\n    return string(result);\n};\nconst evalArray = (arr, typeCheck) => {\n    return array(arr).map((value) => {\n        let result;\n        if (typeof value === \"function\" && value.length === 0) {\n            result = value();\n        }\n        else {\n            result = value;\n        }\n        if (typeCheck) {\n            try {\n                result = typeCheck(result);\n            }\n            catch (err) {\n                throw new Error(`In array; ${err.message}`);\n            }\n        }\n        return result;\n    });\n};\nconst obj = (obj) => {\n    if (typeof obj !== \"object\" || obj === null) {\n        throw new Error(`Expected object, found: ${typeof obj} ${JSON.stringify(obj)}`);\n    }\n    else if (Array.isArray(obj)) {\n        throw new Error(`Expected object, found array`);\n    }\n    return obj;\n};\nconst iterable = (result) => {\n    if (!Array.isArray(result) && typeof result !== \"string\") {\n        throw new Error(`Expected array or string, found: ${typeof result} ${JSON.stringify(result)}`);\n    }\n    return result;\n};\nconst string = (result) => {\n    if (typeof result !== \"string\") {\n        throw new Error(`Expected string, found: ${typeof result} ${JSON.stringify(result)}`);\n    }\n    return result;\n};\nconst char = (result) => {\n    if (typeof result !== \"string\" || result.length !== 1) {\n        throw new Error(`Expected char, found: ${typeof result} ${JSON.stringify(result)}`);\n    }\n    return result;\n};\nexports.formula = function (termDelegate, termTypeDelegate) {\n    const call = (name) => {\n        const upperName = name.toUpperCase();\n        if (prefixOps.hasOwnProperty(upperName)) {\n            return (...args) => {\n                args.isArgumentsArray = true;\n                return prefixOps[upperName](() => args);\n            };\n        }\n        else if (infixOps.hasOwnProperty(upperName)) {\n            return (...args) => infixOps[upperName](args[0], args[1]);\n        }\n        else {\n            throw new Error(`Unknown function: ${name}`);\n        }\n    };\n    const infixOps = {\n        \"+\": (a, b) => num(a()) + num(b()),\n        \"-\": (a, b) => num(a()) - num(b()),\n        \"*\": (a, b) => num(a()) * num(b()),\n        \"/\": (a, b) => num(a()) / num(b()),\n        \",\": (a, b) => {\n            const aVal = a();\n            const aArr = ExpressionParser_1.isArgumentsArray(aVal)\n                ? aVal\n                : [() => aVal];\n            const args = aArr.concat([b]);\n            args.isArgumentsArray = true;\n            return args;\n        },\n        \"%\": (a, b) => num(a()) % num(b()),\n        \"=\": (a, b) => a() === b(),\n        \"!=\": (a, b) => a() !== b(),\n        \"<>\": (a, b) => a() !== b(),\n        \"~=\": (a, b) => Math.abs(num(a()) - num(b())) < Number.EPSILON,\n        \">\": (a, b) => a() > b(),\n        \"<\": (a, b) => a() < b(),\n        \">=\": (a, b) => a() >= b(),\n        \"<=\": (a, b) => a() <= b(),\n        AND: (a, b) => a() && b(),\n        OR: (a, b) => a() || b(),\n        \"^\": (a, b) => Math.pow(num(a()), num(b())),\n    };\n    const prefixOps = {\n        NEG: (arg) => -num(arg()),\n        ADD: (a, b) => num(a()) + num(b()),\n        SUB: (a, b) => num(a()) - num(b()),\n        MUL: (a, b) => num(a()) * num(b()),\n        DIV: (a, b) => num(a()) / num(b()),\n        MOD: (a, b) => num(a()) % num(b()),\n        ISPRIME: (arg) => {\n            const val = num(arg());\n            for (let i = 2, s = Math.sqrt(val); i <= s; i++) {\n                if (val % i === 0)\n                    return false;\n            }\n            return val !== 1;\n        },\n        GCD: (arg1, arg2) => {\n            let a = num(arg1());\n            let b = num(arg2());\n            a = Math.abs(a);\n            b = Math.abs(b);\n            if (b > a) {\n                var temp = a;\n                a = b;\n                b = temp;\n            }\n            while (true) {\n                if (b === 0)\n                    return a;\n                a %= b;\n                if (a === 0)\n                    return b;\n                b %= a;\n            }\n        },\n        NOT: (arg) => !arg(),\n        \"!\": (arg) => !arg(),\n        ABS: (arg) => Math.abs(num(arg())),\n        ACOS: (arg) => Math.acos(num(arg())),\n        ACOSH: (arg) => Math.acosh(num(arg())),\n        ASIN: (arg) => Math.asin(num(arg())),\n        ASINH: (arg) => Math.asinh(num(arg())),\n        ATAN: (arg) => Math.atan(num(arg())),\n        ATAN2: (arg1, arg2) => Math.atan2(num(arg1()), num(arg2())),\n        ATANH: (arg) => Math.atanh(num(arg())),\n        CUBEROOT: (arg) => Math.cbrt(num(arg())),\n        CEIL: (arg) => Math.ceil(num(arg())),\n        COS: (arg) => Math.cos(num(arg())),\n        COSH: (arg) => Math.cos(num(arg())),\n        EXP: (arg) => Math.exp(num(arg())),\n        FLOOR: (arg) => Math.floor(num(arg())),\n        LN: (arg) => Math.log(num(arg())),\n        LOG: (arg) => Math.log10(num(arg())),\n        LOG2: (arg) => Math.log2(num(arg())),\n        SIN: (arg) => Math.sin(num(arg())),\n        SINH: (arg) => Math.sinh(num(arg())),\n        SQRT: (arg) => Math.sqrt(num(arg())),\n        TAN: (arg) => Math.tan(num(arg())),\n        TANH: (arg) => Math.tanh(num(arg())),\n        ROUND: (arg) => Math.round(num(arg())),\n        SIGN: (arg) => Math.sign(num(arg())),\n        TRUNC: (arg) => Math.trunc(num(arg())),\n        IF: (arg1, arg2, arg3) => {\n            const condition = arg1;\n            const thenStatement = arg2;\n            const elseStatement = arg3;\n            if (condition()) {\n                return thenStatement();\n            }\n            else {\n                return elseStatement();\n            }\n        },\n        AVERAGE: (arg) => {\n            const arr = evalArray(arg());\n            const sum = arr.reduce((prev, curr) => prev + num(curr), 0);\n            return num(sum) / arr.length;\n        },\n        SUM: (arg) => evalArray(arg(), num).reduce((prev, curr) => prev + num(curr), 0),\n        CHAR: (arg) => String.fromCharCode(num(arg())),\n        CODE: (arg) => char(arg()).charCodeAt(0),\n        DEC2BIN: (arg) => arg().toString(2),\n        DEC2HEX: (arg) => arg().toString(16),\n        DEC2STR: (arg) => arg().toString(10),\n        BIN2DEC: (arg) => Number.parseInt(string(arg()), 2),\n        HEX2DEC: (arg) => Number.parseInt(string(arg()), 16),\n        STR2DEC: (arg) => Number.parseInt(string(arg()), 10),\n        DEGREES: (arg) => (num(arg()) * 180) / Math.PI,\n        RADIANS: (arg) => (num(arg()) * Math.PI) / 180,\n        MIN: (arg) => evalArray(arg()).reduce((prev, curr) => Math.min(prev, num(curr)), Number.POSITIVE_INFINITY),\n        MAX: (arg) => evalArray(arg()).reduce((prev, curr) => Math.max(prev, num(curr)), Number.NEGATIVE_INFINITY),\n        SORT: (arg) => {\n            const arr = array(arg()).slice();\n            arr.sort();\n            return arr;\n        },\n        REVERSE: (arg) => {\n            const arr = array(arg()).slice();\n            arr.reverse();\n            return arr;\n        },\n        INDEX: (arg1, arg2) => iterable(arg1())[num(arg2())],\n        LENGTH: (arg) => {\n            return iterable(arg()).length;\n        },\n        JOIN: (arg1, arg2) => evalArray(arg2()).join(string(arg1())),\n        STRING: (arg) => evalArray(arg()).join(\"\"),\n        SPLIT: (arg1, arg2) => string(arg2()).split(string(arg1())),\n        CHARARRAY: (arg) => {\n            const str = string(arg());\n            return str.split(\"\");\n        },\n        ARRAY: (arg) => {\n            const val = arg();\n            return ExpressionParser_1.isArgumentsArray(val) ? val.slice() : [val];\n        },\n        ISNAN: (arg) => isNaN(num(arg())),\n        MAP: (arg1, arg2) => {\n            const func = arg1();\n            const arr = evalArray(arg2());\n            return arr.map((val) => {\n                if (typeof func === \"function\") {\n                    return () => func(val);\n                }\n                else {\n                    return call(string(func))(() => val);\n                }\n            });\n        },\n        REDUCE: (arg1, arg2, arg3) => {\n            const func = arg1();\n            const start = arg2();\n            const arr = evalArray(arg3());\n            return arr.reduce((prev, curr) => {\n                const args = [() => prev, () => curr];\n                if (typeof func === \"function\") {\n                    return func(...args);\n                }\n                else {\n                    return call(string(func))(...args);\n                }\n            }, start);\n        },\n        RANGE: (arg1, arg2) => {\n            const start = num(arg1());\n            const limit = num(arg2());\n            const result = [];\n            for (let i = start; i < limit; i++) {\n                result.push(i);\n            }\n            return result;\n        },\n        UPPER: (arg) => string(arg()).toUpperCase(),\n        LOWER: (arg) => string(arg()).toLowerCase(),\n        ZIP: (arg1, arg2) => {\n            const arr1 = evalArray(arg1());\n            const arr2 = evalArray(arg2());\n            if (arr1.length !== arr2.length) {\n                throw new Error(\"ZIP: Arrays are of different lengths\");\n            }\n            else {\n                return arr1.map((v1, i) => [v1, arr2[i]]);\n            }\n        },\n        UNZIP: (arg1) => {\n            const inputArr = evalArray(arg1());\n            const arr1 = inputArr.map((item) => array(item)[0]);\n            const arr2 = inputArr.map((item) => array(item)[1]);\n            return [\n                arr1,\n                arr2\n            ];\n        },\n        TAKE: (arg1, arg2) => {\n            const n = num(arg1());\n            const arr = evalArray(arg2());\n            return arr.slice(0, n);\n        },\n        DROP: (arg1, arg2) => {\n            const n = num(arg1());\n            const arr = evalArray(arg2());\n            return arr.slice(n);\n        },\n        SLICE: (arg1, arg2, arg3) => {\n            const start = num(arg1());\n            const limit = num(arg2());\n            const arr = evalArray(arg3());\n            return arr.slice(start, limit);\n        },\n        CONCAT: (arg1, arg2) => {\n            const arr1 = array(arg1());\n            const arr2 = array(arg2());\n            return arr1.concat(arr2);\n        },\n        HEAD: (arg1) => {\n            const arr = array(arg1());\n            return arr[0];\n        },\n        TAIL: (arg1) => {\n            const arr = array(arg1());\n            return arr.slice(1);\n        },\n        LAST: (arg1) => {\n            const arr = array(arg1());\n            return arr[arr.length - 1];\n        },\n        CONS: (arg1, arg2) => {\n            const head = arg1();\n            const arr = array(arg2());\n            return [head].concat(arr);\n        },\n        FILTER: (arg1, arg2) => {\n            const func = arg1();\n            const arr = evalArray(arg2());\n            const result = [];\n            arr.forEach((val) => {\n                let isSatisfied;\n                if (typeof func === \"function\") {\n                    isSatisfied = evalBool(func(val));\n                }\n                else {\n                    isSatisfied = evalBool(call(string(func))(() => val));\n                }\n                if (isSatisfied) {\n                    result.push(val);\n                }\n            });\n            return result;\n        },\n        TAKEWHILE: (arg1, arg2) => {\n            const func = arg1();\n            const arr = evalArray(arg2());\n            const satisfaction = (val) => {\n                let isSatisfied;\n                if (typeof func === \"function\") {\n                    isSatisfied = evalBool(func(val));\n                }\n                else {\n                    isSatisfied = evalBool(call(string(func))(() => val));\n                }\n                return isSatisfied;\n            };\n            let i = 0;\n            while (satisfaction(arr[i]) && i < arr.length) {\n                i++;\n            }\n            return arr.slice(0, i);\n        },\n        DROPWHILE: (arg1, arg2) => {\n            const func = arg1();\n            const arr = evalArray(arg2());\n            const satisfaction = (val) => {\n                let isSatisfied;\n                if (typeof func === \"function\") {\n                    isSatisfied = evalBool(func(val));\n                }\n                else {\n                    isSatisfied = evalBool(call(string(func))(() => val));\n                }\n                return isSatisfied;\n            };\n            let i = 0;\n            while (satisfaction(arr[i]) && i < arr.length) {\n                i++;\n            }\n            return arr.slice(i);\n        },\n        GET: (arg1, arg2) => {\n            const key = string(arg1());\n            const inputObj = obj(arg2());\n            return inputObj[key];\n        },\n        PUT: (arg1, arg2, arg3) => {\n            const key = string(arg1());\n            const value = arg2();\n            const inputObj = obj(arg3());\n            return Object.assign({}, inputObj, { [key]: value });\n        },\n        DICT: (arg1, arg2) => {\n            const arr1 = evalArray(arg1());\n            const arr2 = evalArray(arg2());\n            const result = {};\n            arr1.forEach((v1, i) => {\n                const key = string(v1);\n                result[key] = arr2[i];\n            });\n            return result;\n        },\n        UNZIPDICT: (arg1) => {\n            const arr = evalArray(arg1());\n            const result = {};\n            arr.forEach((item) => {\n                const kvPair = array(item);\n                if (kvPair.length !== 2) {\n                    throw new Error(`UNZIPDICT: Expected sub-array of length 2`);\n                }\n                const [key, value] = kvPair;\n                try {\n                    result[evalString(key)] = value;\n                }\n                catch (err) {\n                    throw new Error(`UNZIPDICT keys; ${err.message}`);\n                }\n            });\n            return result;\n        },\n        KEYS: (arg1) => {\n            const inputObj = obj(arg1());\n            return Object.keys(inputObj).sort();\n        },\n        VALUES: (arg1) => {\n            const inputObj = obj(arg1());\n            return Object.keys(inputObj).sort().map((key) => inputObj[key]);\n        }\n    };\n    // Ensure arguments are unpacked accordingly\n    // Except for the ARRAY constructor\n    Object.keys(prefixOps).forEach((key) => {\n        if (key !== \"ARRAY\") {\n            prefixOps[key] = unpackArgs(prefixOps[key]);\n        }\n    });\n    return {\n        ESCAPE_CHAR: \"\\\\\",\n        INFIX_OPS: infixOps,\n        PREFIX_OPS: prefixOps,\n        PRECEDENCE: [\n            Object.keys(prefixOps),\n            [\"^\"],\n            [\"*\", \"/\", \"%\", \"MOD\"],\n            [\"+\", \"-\"],\n            [\"<\", \">\", \"<=\", \">=\"],\n            [\"=\", \"!=\", \"<>\", \"~=\"],\n            [\"AND\", \"OR\"],\n            [\",\"],\n        ],\n        LITERAL_OPEN: '\"',\n        LITERAL_CLOSE: '\"',\n        GROUP_OPEN: \"(\",\n        GROUP_CLOSE: \")\",\n        SEPARATOR: \" \",\n        SYMBOLS: [\n            \"^\",\n            \"*\",\n            \"/\",\n            \"%\",\n            \"+\",\n            \"-\",\n            \"<\",\n            \">\",\n            \"=\",\n            \"!\",\n            \",\",\n            '\"',\n            \"(\",\n            \")\",\n            \"[\",\n            \"]\",\n            \"~\",\n        ],\n        AMBIGUOUS: {\n            \"-\": \"NEG\",\n        },\n        SURROUNDING: {\n            ARRAY: {\n                OPEN: \"[\",\n                CLOSE: \"]\",\n            },\n        },\n        termDelegate: function (term) {\n            const numVal = parseFloat(term);\n            if (Number.isNaN(numVal)) {\n                switch (term) {\n                    case \"E\":\n                        return Math.E;\n                    case \"LN2\":\n                        return Math.LN2;\n                    case \"LN10\":\n                        return Math.LN10;\n                    case \"LOG2E\":\n                        return Math.LOG2E;\n                    case \"LOG10E\":\n                        return Math.LOG10E;\n                    case \"PI\":\n                        return Math.PI;\n                    case \"SQRTHALF\":\n                        return Math.SQRT1_2;\n                    case \"SQRT2\":\n                        return Math.SQRT2;\n                    case \"FALSE\":\n                        return false;\n                    case \"TRUE\":\n                        return true;\n                    case \"EMPTY\":\n                        return [];\n                    case \"EMPTYDICT\":\n                        return {};\n                    case \"INFINITY\":\n                        return Number.POSITIVE_INFINITY;\n                    case \"EPSILON\":\n                        return Number.EPSILON;\n                    case \"UNDEFINED\":\n                        return undefined;\n                    default:\n                        return termDelegate(term);\n                }\n            }\n            else {\n                return numVal;\n            }\n        },\n        termTyper: function (term) {\n            const numVal = parseFloat(term);\n            if (Number.isNaN(numVal)) {\n                switch (term) {\n                    case \"E\":\n                        return \"number\";\n                    case \"LN2\":\n                        return \"number\";\n                    case \"LN10\":\n                        return \"number\";\n                    case \"LOG2E\":\n                        return \"number\";\n                    case \"LOG10E\":\n                        return \"number\";\n                    case \"PI\":\n                        return \"number\";\n                    case \"SQRTHALF\":\n                        return \"number\";\n                    case \"SQRT2\":\n                        return \"number\";\n                    case \"FALSE\":\n                        return \"boolean\";\n                    case \"TRUE\":\n                        return \"boolean\";\n                    case \"EMPTY\":\n                        return \"array\";\n                    case \"INFINITY\":\n                        return \"number\";\n                    case \"EPSILON\":\n                        return \"number\";\n                    default:\n                        return termTypeDelegate ? termTypeDelegate(term) : \"unknown\";\n                }\n            }\n            else {\n                return \"number\";\n            }\n        },\n        isCaseInsensitive: true,\n        descriptions: [\n            {\n                op: \"+\",\n                fix: \"infix\",\n                sig: [\"a: Number\", \"b: Number\", \"Number\"],\n                text: \"Performs addition: a + b\",\n            },\n            {\n                op: \"ADD\",\n                fix: \"prefix\",\n                sig: [\"a: Number\", \"b: Number\", \"Number\"],\n                text: \"Performs addition: ADD(a, b) = a + b\",\n            },\n            {\n                op: \"*\",\n                fix: \"infix\",\n                sig: [\"a: Number\", \"b: Number\", \"Number\"],\n                text: \"Performs multiplication: a * b\",\n            },\n            {\n                op: \"MUL\",\n                fix: \"prefix\",\n                sig: [\"a: Number\", \"b: Number\", \"Number\"],\n                text: \"Performs multiplication: MUL(a, b) = a * b\",\n            },\n            {\n                op: \"-\",\n                fix: \"infix\",\n                sig: [\"a: Number\", \"b: Number\", \"Number\"],\n                text: \"Performs subtraction: a - b\",\n            },\n            {\n                op: \"SUB\",\n                fix: \"prefix\",\n                sig: [\"a: Number\", \"b: Number\", \"Number\"],\n                text: \"Performs subtraction: SUB(a, b) = a - b\",\n            },\n            {\n                op: \"/\",\n                fix: \"infix\",\n                sig: [\"a: Number\", \"b: Number\", \"Number\"],\n                text: \"Performs division: a / b\",\n            },\n            {\n                op: \"DIV\",\n                fix: \"prefix\",\n                sig: [\"a: Number\", \"b: Number\", \"Number\"],\n                text: \"Performs division: DIV(a, b) = a / b\",\n            },\n            {\n                op: \",\",\n                fix: \"infix\",\n                sig: [\"a\", \"b\", \"Arguments\"],\n                text: \"Returns an array of arguments with b appended to a. If a is not an argument array, it is automatically appended to an empty array.\",\n            },\n            {\n                op: \"MOD\",\n                fix: \"prefix\",\n                sig: [\"a: Number\", \"b: Number\", \"Number\"],\n                text: \"Performs modulo operation: MOD(a, b). (equivalent to a % b)\",\n            },\n            {\n                op: \"%\",\n                fix: \"infix\",\n                sig: [\"a: Number\", \"b: Number\", \"Number\"],\n                text: \"Performs modulo operation: a % b. (equivalent to MOD(a, b))\",\n            },\n            {\n                op: \"=\",\n                fix: \"infix\",\n                sig: [\"a\", \"b\", \"Boolean\"],\n                text: \"Returns TRUE if a = b. Otherwise returns FALSE.\",\n            },\n            {\n                op: \"!=\",\n                fix: \"infix\",\n                sig: [\"a: Number\", \"b: Number\", \"Number\"],\n                text: \"Returns FALSE if a = b. Otherwise returns TRUE. (equivalent to <>)\",\n            },\n            {\n                op: \"<>\",\n                fix: \"infix\",\n                sig: [\"a: Number\", \"b: Number\", \"Number\"],\n                text: \"Returns FALSE if a = b. Otherwise returns TRUE. (equivalent to !=)\",\n            },\n            {\n                op: \"~=\",\n                fix: \"infix\",\n                sig: [\"a: Number\", \"b: Number\", \"Number\"],\n                text: \"Returns TRUE if ABS(a - b) < EPSILON. Otherwise returns FALSE.\",\n            },\n            {\n                op: \">\",\n                fix: \"infix\",\n                sig: [\"a: Number\", \"b: Number\", \"Boolean\"],\n                text: \"Performs greater-than operation: a > b\",\n            },\n            {\n                op: \"<\",\n                fix: \"infix\",\n                sig: [\"a: Number\", \"b: Number\", \"Boolean\"],\n                text: \"Performs less-than operation: a < b\",\n            },\n            {\n                op: \">=\",\n                fix: \"infix\",\n                sig: [\"a: Number\", \"b: Number\", \"Boolean\"],\n                text: \"Performs greater-than-or-equal operation: a >= b\",\n            },\n            {\n                op: \"<=\",\n                fix: \"infix\",\n                sig: [\"a: Number\", \"b: Number\", \"Boolean\"],\n                text: \"Performs less-than-or-equal operation: a <= b\",\n            },\n            {\n                op: \"AND\",\n                fix: \"infix\",\n                sig: [\"a: Boolean\", \"b: Boolean\", \"Boolean\"],\n                text: \"Performs logical AND: a AND b.\",\n            },\n            {\n                op: \"OR\",\n                fix: \"infix\",\n                sig: [\"a: Boolean\", \"b: Boolean\", \"Boolean\"],\n                text: \"Performs logical OR: a OR b.\",\n            },\n            {\n                op: \"^\",\n                fix: \"infix\",\n                sig: [\"a: Number\", \"b: Number\", \"Number\"],\n                text: \"Performs exponentiation (a to the power of b): a ^ b\",\n            },\n            {\n                op: \"NEG\",\n                fix: \"prefix\",\n                sig: [\"value: Number\", \"Number\"],\n                text: \"Performs negation of the value: NEG(value). (equivalent to -value)\",\n            },\n            {\n                op: \"-\",\n                fix: \"prefix\",\n                sig: [\"value: Number\", \"Number\"],\n                text: 'Performs negation of the value: -value. Note: no space can be present before \"value\". (equivalent to NEG(value))',\n            },\n            {\n                op: \"ISPRIME\",\n                fix: \"prefix\",\n                sig: [\"value: Number\", \"Number\"],\n                text: \"Returns TRUE if value is prime, FALSE otherwise.\",\n            },\n            {\n                op: \"GCD\",\n                fix: \"prefix\",\n                sig: [\"a: Number\", \"b: Number\", \"Number\"],\n                text: \"Returns the greatest common divisor of a and b.\",\n            },\n            {\n                op: \"NOT\",\n                fix: \"prefix\",\n                sig: [\"value: Boolean\", \"Boolean\"],\n                text: \"Performs logical NOT of the value: NOT(value). (equivalent to !value)\",\n            },\n            {\n                op: \"!\",\n                fix: \"prefix\",\n                sig: [\"value: Boolean\", \"Boolean\"],\n                text: \"Performs logical NOT of the value: !value. (equivalent to NOT(value))\",\n            },\n            {\n                op: \"ABS\",\n                fix: \"prefix\",\n                sig: [\"value: Number\", \"Number\"],\n                text: \"Returns the absolute value of the number: ABS(value).\",\n            },\n            {\n                op: \"ACOS\",\n                fix: \"prefix\",\n                sig: [\"value: Number\", \"Number\"],\n                text: \"Returns the arc cosine (inverse cosine) of the number: ACOS(value).\",\n            },\n            {\n                op: \"ACOSH\",\n                fix: \"prefix\",\n                sig: [\"value: Number\", \"Number\"],\n                text: \"Returns the inverse hyperbolic cosine of the number: ACOSH(value).\",\n            },\n            {\n                op: \"ASIN\",\n                fix: \"prefix\",\n                sig: [\"value: Number\", \"Number\"],\n                text: \"Returns the arcsine of the number: ASIN(value).\",\n            },\n            {\n                op: \"ASINH\",\n                fix: \"prefix\",\n                sig: [\"value: Number\", \"Number\"],\n                text: \"Returns the inverse hyperbolic sine of the number: ASINH(value).\",\n            },\n            {\n                op: \"ATAN\",\n                fix: \"prefix\",\n                sig: [\"value: Number\", \"Number\"],\n                text: \"Returns the arctangent of the number: ATAN(value).\",\n            },\n            {\n                op: \"ATAN2\",\n                fix: \"prefix\",\n                sig: [\"y: Number\", \"x: Number\", \"Number\"],\n                text: \"Returns the angle (radians) from the X-axis to a point, given a cartesian y-coordinate and x-coordinate: ATAN2(y, x).\",\n            },\n            {\n                op: \"ATANH\",\n                fix: \"prefix\",\n                sig: [\"value: Number\", \"Number\"],\n                text: \"Returns the inverse hyperbolic tangent of the number: ATANH(value).\",\n            },\n            {\n                op: \"CUBEROOT\",\n                fix: \"prefix\",\n                sig: [\"value: Number\", \"Number\"],\n                text: \"Returns an approximation of the cubed root of the number: CUBEROOT(value).\",\n            },\n            {\n                op: \"COS\",\n                fix: \"prefix\",\n                sig: [\"value: Number\", \"Number\"],\n                text: \"Returns the cosine of the number: COS(value).\",\n            },\n            {\n                op: \"COSH\",\n                fix: \"prefix\",\n                sig: [\"value: Number\", \"Number\"],\n                text: \"Returns the hyperbolic cosine of the number: COSH(value).\",\n            },\n            {\n                op: \"EXP\",\n                fix: \"prefix\",\n                sig: [\"value: Number\", \"Number\"],\n                text: \"Returns the natural logarithm (e) raised to this value: EXP(value).\",\n            },\n            {\n                op: \"LN\",\n                fix: \"prefix\",\n                sig: [\"value: Number\", \"Number\"],\n                text: \"Returns the natural logarithm (base e) of the number: LN(value).\",\n            },\n            {\n                op: \"LOG\",\n                fix: \"prefix\",\n                sig: [\"value: Number\", \"Number\"],\n                text: \"Returns the base 10 logarithm of the number: LOG(value).\",\n            },\n            {\n                op: \"LOG2\",\n                fix: \"prefix\",\n                sig: [\"value: Number\", \"Number\"],\n                text: \"Returns the base 2 logarithm of the number: LOG2(value).\",\n            },\n            {\n                op: \"SIN\",\n                fix: \"prefix\",\n                sig: [\"value: Number\", \"Number\"],\n                text: \"Returns the sine of the number: SIN(value).\",\n            },\n            {\n                op: \"SINH\",\n                fix: \"prefix\",\n                sig: [\"value: Number\", \"Number\"],\n                text: \"Returns the hyperbolic sine of the number: SINH(value).\",\n            },\n            {\n                op: \"SQRT\",\n                fix: \"prefix\",\n                sig: [\"value: Number\", \"Number\"],\n                text: \"Returns the square root of the number: SQRT(value).\",\n            },\n            {\n                op: \"TAN\",\n                fix: \"prefix\",\n                sig: [\"value: Number\", \"Number\"],\n                text: \"Returns the tangent of the number: TAN(value).\",\n            },\n            {\n                op: \"TANH\",\n                fix: \"prefix\",\n                sig: [\"value: Number\", \"Number\"],\n                text: \"Returns the hyperbolic tangent of the number: TANH(value).\",\n            },\n            {\n                op: \"DEGREES\",\n                fix: \"prefix\",\n                sig: [\"radians: Number\", \"Number\"],\n                text: \"Performs a conversion of radians to degrees: DEGREES(radians).\",\n            },\n            {\n                op: \"RADIANS\",\n                fix: \"prefix\",\n                sig: [\"degrees: Number\", \"Number\"],\n                text: \"Performs a conversion of radians to degrees: RADIANS(degrees).\",\n            },\n            {\n                op: \"CEIL\",\n                fix: \"prefix\",\n                sig: [\"value: Number\", \"Number\"],\n                text: \"Returns the smallest integer greater-than or equal-to the number: CEIL(value).\",\n            },\n            {\n                op: \"FLOOR\",\n                fix: \"prefix\",\n                sig: [\"value: Number\", \"Number\"],\n                text: \"Returns the greatest integer less-than or equal-to the number: CEIL(value).\",\n            },\n            {\n                op: \"ROUND\",\n                fix: \"prefix\",\n                sig: [\"value: Number\", \"Number\"],\n                text: \"Returns the value rounded to the nearest integer: ROUND(value).\",\n            },\n            {\n                op: \"TRUNC\",\n                fix: \"prefix\",\n                sig: [\"value: Number\", \"Number\"],\n                text: \"Returns the integral part of the number, truncating any fractional digits: TRUNC(value).\",\n            },\n            {\n                op: \"SIGN\",\n                fix: \"prefix\",\n                sig: [\"value: Number\", \"Number\"],\n                text: \"Returns the sign of the value, indicating whether the number is positive (1) or negative (-1): SIGN(value).\",\n            },\n            {\n                op: \"ISNAN\",\n                fix: \"prefix\",\n                sig: [\"value\", \"Boolean\"],\n                text: \"Returns TRUE if a value is not a number (e.g. the result of an invalid mathematical operation), otherwise returns FALSE: ISNAN(value).\",\n            },\n            {\n                op: \"IF\",\n                fix: \"prefix\",\n                sig: [\"condition: Boolean\", \"then\", \"else\", \"result\"],\n                text: 'Tests the condition and returns the \"then\" value if the condition is TRUE, otherwise returns the \"else\" value: IF(condition, then, else).',\n            },\n            {\n                op: \"AVERAGE\",\n                fix: \"prefix\",\n                sig: [\"values: Array of Numbers\", \"Number\"],\n                text: \"Returns the average (mean) of an array of numbers. AVERAGE(array).\",\n            },\n            {\n                op: \"SUM\",\n                fix: \"prefix\",\n                sig: [\"values: Array of Numbers\", \"Number\"],\n                text: \"Returns the sum of an array of numbers. SUM(array).\",\n            },\n            {\n                op: \"MIN\",\n                fix: \"prefix\",\n                sig: [\"values: Array of Numbers\", \"Number\"],\n                text: \"Returns the minimum value in an array of numbers. MIN(array).\",\n            },\n            {\n                op: \"MAX\",\n                fix: \"prefix\",\n                sig: [\"values: Array of Numbers\", \"Number\"],\n                text: \"Returns the maximum value in an array of numbers. MAX(array).\",\n            },\n            {\n                op: \"CHAR\",\n                fix: \"prefix\",\n                sig: [\"code: Integer\", \"String\"],\n                text: \"Returns a single-character string with a unicode character representing the value of the given code. CHAR(code)\",\n            },\n            {\n                op: \"CODE\",\n                fix: \"prefix\",\n                sig: [\"string: String\", \"Integer\"],\n                text: \"Returns the unicode value of the first character of a string: CODE(string)\",\n            },\n            {\n                op: \"UPPER\",\n                fix: \"prefix\",\n                sig: [\"string: String\", \"String\"],\n                text: \"Converts a string to uppercase: UPPER(string).\",\n            },\n            {\n                op: \"LOWER\",\n                fix: \"prefix\",\n                sig: [\"string: String\", \"String\"],\n                text: \"Converts a string to lowercase: LOWER(string).\",\n            },\n            {\n                op: \"DEC2BIN\",\n                fix: \"prefix\",\n                sig: [\"decimal: Integer\", \"binary: String\"],\n                text: 'Returns a string of \"1\" and \"0\" characters representing the binary representation of the decimal value. DEC2BIN(decimal)',\n            },\n            {\n                op: \"DEC2HEX\",\n                fix: \"prefix\",\n                sig: [\"decimal: Integer\", \"hex: String\"],\n                text: \"Returns a string of characters representing the hexadecimal representation of the decimal value. DEC2HEX(decimal)\",\n            },\n            {\n                op: \"BIN2DEC\",\n                fix: \"prefix\",\n                sig: [\"binary: String\", \"decimal: Integer\"],\n                text: 'Returns the base 10 value of a binary string of \"1\" and \"0\" characters. BIN2DEC(binary)',\n            },\n            {\n                op: \"HEX2DEC\",\n                fix: \"prefix\",\n                sig: [\"hex: String\", \"decimal: Integer\"],\n                text: \"Returns the base 10 value of a hexadecimal string. HEX2DEC(hex)\",\n            },\n            {\n                op: \"SORT\",\n                fix: \"prefix\",\n                sig: [\"array: Array\", \"Array\"],\n                text: \"Returns a sorted array: SORT(array).\",\n            },\n            {\n                op: \"REVERSE\",\n                fix: \"prefix\",\n                sig: [\"array: Array\", \"Array\"],\n                text: \"Returns a reversed array: REVERSE(array).\",\n            },\n            {\n                op: \"INDEX\",\n                fix: \"prefix\",\n                sig: [\"array: Array\", \"i: Integer\", \"Value\"],\n                text: \"Returns the value at the given array index: INDEX(array, i).\",\n            },\n            {\n                op: \"LENGTH\",\n                fix: \"prefix\",\n                sig: [\"array: Array\", \"Integer\"],\n                text: \"Returns the length of an array: LENGTH(array).\",\n            },\n            {\n                op: \"JOIN\",\n                fix: \"prefix\",\n                sig: [\"array: Array\", \"separator: String\", \"String\"],\n                text: \"Joins each array element into a string, using a separator: JOIN(array, separator).\",\n            },\n            {\n                op: \"SPLIT\",\n                fix: \"prefix\",\n                sig: [\"string: String\", \"separator: String\", \"Array\"],\n                text: \"Splits a string into an array of characters, using a separator: SPLIT(string, separator).\",\n            },\n            {\n                op: \"STRING\",\n                fix: \"prefix\",\n                sig: [\"array: Array\", \"String\"],\n                text: \"Converts an array into a string: STRING(array).\",\n            },\n            {\n                op: \"CHARARRAY\",\n                fix: \"prefix\",\n                sig: [\"string: String\", \"Array\"],\n                text: \"Converts a string into an array of characters: CHARARRAY(string)\",\n            },\n            {\n                op: \"ARRAY\",\n                fix: \"prefix\",\n                sig: [\"arguments...\", \"Array\"],\n                text: \"Converts arguments into an array: ARRAY(a, b, c, ...).\",\n            },\n            {\n                op: \"MAP\",\n                fix: \"prefix\",\n                sig: [\"mapper: Reference\", \"array: Array\", \"Array\"],\n                text: \"Performs a mapper function on each element of the array: MAP(mapper, array).\",\n            },\n            {\n                op: \"REDUCE\",\n                fix: \"prefix\",\n                sig: [\"reducer: Reference\", \"start\", \"array: Array\", \"Array\"],\n                text: 'Performs a reducer function on each pair of array elements, using \"start\" as its starting value: REDUCE(reducer, array).',\n            },\n            {\n                op: \"RANGE\",\n                fix: \"prefix\",\n                sig: [\"start: Integer\", \"limit: Integer\", \"Array\"],\n                text: \"Creates an array of integers, incrementing from start (included) to the limit (excluded): RANGE(start, limit)\",\n            },\n            {\n                op: \"ZIP\",\n                fix: \"prefix\",\n                sig: [\"array1: Array\", \"array2: Array\", \"Array of [array1[i], array2[i]]\"],\n                text: \"Combines two arrays into a single array of both values, paired at their respective position: ZIP(array1, array2)\",\n            },\n            {\n                op: \"UNZIP\",\n                fix: \"prefix\",\n                sig: [\"array: Array of [a, b]\", \"[Array of a, Array of b]\"],\n                text: \"Splits a single array of pairs into two arrays with values at their respective positions: UNZIP(array)\",\n            },\n            {\n                op: \"TAKE\",\n                fix: \"prefix\",\n                sig: [\"n: Integer\", \"Array\"],\n                text: \"Takes the first n values from the array: TAKE(n, array)\",\n            },\n            {\n                op: \"DROP\",\n                fix: \"prefix\",\n                sig: [\"n: Integer\", \"Array\"],\n                text: \"Drops the first n values from the array: DROP(n, array)\",\n            },\n            {\n                op: \"SLICE\",\n                fix: \"prefix\",\n                sig: [\"startIndex: Integer\", \"limitIndex: Integer\", \"Array\"],\n                text: \"Slices an array from startIndex to (but not including) limitIndex: SLICE(startIndex, limitIndex, array)\",\n            },\n            {\n                op: \"CONCAT\",\n                fix: \"prefix\",\n                sig: [\"array1: Array\", \"array2: Array\", \"Array\"],\n                text: \"Concatenates two arrays into one: CONCAT(array1, array2)\",\n            },\n            {\n                op: \"HEAD\",\n                fix: \"prefix\",\n                sig: [\"array: Array\", \"Value\"],\n                text: \"Retrieves the first element of an array: HEAD(array)\",\n            },\n            {\n                op: \"TAIL\",\n                fix: \"prefix\",\n                sig: [\"array: Array\", \"Array\"],\n                text: \"Returns the array without the first element: TAIL(array)\",\n            },\n            {\n                op: \"LAST\",\n                fix: \"prefix\",\n                sig: [\"array: Array\", \"Value\"],\n                text: \"Retrieves the last element of an array: HEAD(array)\",\n            },\n            {\n                op: \"CONS\",\n                fix: \"prefix\",\n                sig: [\"head: Value\", \"array: Array\", \"Array\"],\n                text: \"Returns an array with a new value at the first position: CONS(head, array)\",\n            },\n            {\n                op: \"FILTER\",\n                fix: \"prefix\",\n                sig: [\"filter: Reference\", \"array: Array\", \"Array\"],\n                text: \"Returns an array of all elements for which 'filter(element)' returns true: FILTER(filter, array).\",\n            },\n            {\n                op: \"TAKEWHILE\",\n                fix: \"prefix\",\n                sig: [\"check: Reference\", \"array: Array\", \"Array\"],\n                text: \"Returns a new array of all elements up until 'check(element)' returns false: TAKEWHILE(check, array).\",\n            },\n            {\n                op: \"DROPWHILE\",\n                fix: \"prefix\",\n                sig: [\"check: Reference\", \"array: Array\", \"Array\"],\n                text: \"Returns a new array skipping all elements up until 'check(element)' returns false: DROPWHILE(check, array).\",\n            },\n            {\n                op: \"GET\",\n                fix: \"prefix\",\n                sig: [\"key: String\", \"dict: Dictionary\", \"Value\"],\n                text: \"Retrieves the value of the associated key in a dictionary: GET(key, dict)\",\n            },\n            {\n                op: \"PUT\",\n                fix: \"prefix\",\n                sig: [\"key: String\", \"value: Value\", \"dict: Dictionary\", \"Dictionary\"],\n                text: \"Returns a dictionary with the key set to a new value: PUT(key, value, dict)\",\n            },\n            {\n                op: \"DICT\",\n                fix: \"prefix\",\n                sig: [\"keys: Array\", \"values: Array\", \"Dictionary\"],\n                text: \"Constructs a new dictionary out of an array of keys and a corresponding array of values: DICT(keys, values)\",\n            },\n            {\n                op: \"UNZIPDICT\",\n                fix: \"prefix\",\n                sig: [\"keyValuePairs: Array\", \"Dictionary\"],\n                text: \"Constructs a new dictionary out of an array of [key, value] pairs: UNZIPDICT(keyValuePairs)\",\n            },\n            {\n                op: \"KEYS\",\n                fix: \"prefix\",\n                sig: [\"dict: Dictionary\", \"Array\"],\n                text: \"Returns all the keys of a dictionary in alphabetical order: KEYS(dict)\",\n            },\n            {\n                op: \"VALUES\",\n                fix: \"prefix\",\n                sig: [\"dict: Dictionary\", \"Array\"],\n                text: \"Returns all the values of a dictionary, in alphabetical order of their keys: VALUES(dict)\",\n            },\n            {\n                op: \"[...]\",\n                fix: \"surround\",\n                sig: [\"arguments...\", \"Array\"],\n                text: \"Converts arguments into an array: [a, b, c, ...].\",\n            },\n        ],\n    };\n};\n//# sourceMappingURL=formula.js.map","// extracted by mini-css-extract-plugin\nexport {};","/* globals PIXI */\nconst Stats = require('../helpers-web/stats.js');\nconst TownView = require('../views/town-view');\nrequire('../helpers-web/fill-with-aspect');\nconst PCView = require('../views/pc-view');\nconst KeyboardInputMgr = require('../input/keyboard-input-mgr');\nconst GamepadInputMgr = require('../input/gamepad-input-mgr');\nconst PlayerAppInputRouter = require('../input/player-app-input-router');\nconst PlayerCharacter = require('../model/player-character');\nconst DialogueOverlay = require('../dialogues/dialogue-overlay');\nconst DialogueSequencer = require('../dialogues/dialogue-sequencer');\n\nclass PlayerApp {\n  constructor(config, playerId) {\n    this.config = config;\n    this.playerId = playerId;\n    this.pc = new PlayerCharacter(this.config, playerId);\n    this.otherPcs = Object.fromEntries(Object.entries(this.config.players)\n      .filter(([id, player]) => (player.enabled === undefined || player.enabled) && id !== playerId)\n      .map(([id]) => [id, new PlayerCharacter(this.config, id)]));\n    this.canControlPc = false;\n\n    this.$element = $('<div></div>')\n      .addClass('player-app');\n\n    this.$pixiWrapper = $('<div></div>')\n      .addClass('pixi-wrapper')\n      .appendTo(this.$element);\n\n    this.dialogueOverlay = new DialogueOverlay(this.config);\n    this.dialogueSequencer = new DialogueSequencer(this.dialogueOverlay);\n    this.$element.append(this.dialogueOverlay.$element);\n  }\n\n  async init() {\n    this.pixiApp = new PIXI.Application({\n      // todo: get these from config or constants\n      width: PlayerApp.APP_WIDTH,\n      height: PlayerApp.APP_HEIGHT,\n      backgroundColor: 0xffffff,\n    });\n    this.$pixiWrapper.append(this.pixiApp.view);\n\n    await this.loadTextures();\n\n    this.townView = new TownView(this.config, this.textures);\n    this.pixiApp.stage.addChild(this.townView.display);\n    this.pcView = new PCView(this.config, this.textures, this.pc, this.townView);\n    this.otherPcViews = Object.fromEntries(\n      Object.entries(this.otherPcs)\n        .map(([id, pc]) => [id, new PCView(this.config, this.textures, pc, this.townView)])\n    );\n\n    this.townView.mainLayer.addChild(this.pcView.display);\n    if (Object.values(this.otherPcViews).length > 0) {\n      this.townView.mainLayer.addChild(...Object.values(this.otherPcViews)\n        .map(pcView => pcView.display));\n    }\n\n    this.stats = new Stats();\n    this.$element.append(this.stats.dom);\n\n    this.keyboardInputMgr = new KeyboardInputMgr();\n    this.keyboardInputMgr.addListeners();\n    this.keyboardInputMgr.addToggle('KeyD', () => { this.stats.togglePanel(); });\n\n    this.gamepadInputMgr = new GamepadInputMgr();\n    this.gamepadInputMgr.addListeners();\n\n    const inputMgr = this.gamepadInputMgr;\n\n    this.inputRouter = new PlayerAppInputRouter(inputMgr);\n    this.inputRouter.routeToPcMovement(this);\n\n    this.pixiApp.ticker.add((time) => {\n      this.stats.frameBegin();\n      inputMgr.update();\n      if (this.canControlPc) {\n        const { x, y } = inputMgr.getDirection();\n        this.pc.setSpeed(x * 10, y * 10);\n      }\n      this.pcView.animate(time);\n      Object.entries(this.otherPcViews).forEach(([, pcView]) => {\n        pcView.display.position = pcView.pc.position;\n        pcView.display.zIndex = pcView.pc.position.y;\n      });\n      this.townView.mainLayer.sortChildren();\n\n      // Set the town view's pivot so the PC is always centered on the screen,\n      // but don't let the pivot go off the edge of the town\n      this.townView.display.pivot.set(\n        Math.max(0, Math.min(this.pcView.display.x + this.pcView.display.width / 2 - PlayerApp.APP_WIDTH / 2, this.townView.townSize.width - PlayerApp.APP_WIDTH)),\n        Math.max(0, Math.min(this.pcView.display.y + this.pcView.display.height / 2 - PlayerApp.APP_HEIGHT / 2, this.townView.townSize.height - PlayerApp.APP_HEIGHT)),\n      );\n      this.stats.frameEnd();\n    });\n\n    return this;\n  }\n\n  async loadTextures() {\n    PIXI.Assets.init({\n      basePath: './static/textures',\n      manifest: this.config.textures,\n    });\n\n    this.textures = await PIXI.Assets.loadBundle('town-view');\n  }\n\n  resize() {\n    this.$element.fillWithAspect(PlayerApp.APP_WIDTH / PlayerApp.APP_HEIGHT);\n    this.$element.css('font-size', `${(this.$element.width() * PlayerApp.FONT_RATIO).toFixed(3)}px`);\n  }\n\n  enablePcControl() {\n    this.canControlPc = true;\n  }\n\n  disablePcControl() {\n    this.canControlPc = false;\n    this.pc.setSpeed(0, 0);\n  }\n\n  playDialogue(dialogue) {\n    this.inputRouter.routeToDialogueOverlay(this.dialogueOverlay, this.dialogueSequencer);\n    this.dialogueSequencer.play(dialogue);\n    this.dialogueSequencer.events.once('end', () => {\n      this.inputRouter.routeToPcMovement(this);\n    });\n  }\n}\n\nPlayerApp.APP_WIDTH = 1024;\nPlayerApp.APP_HEIGHT = 768;\nPlayerApp.FONT_RATIO = 0.0175; // 1.75% of the width of the app\n\nmodule.exports = PlayerApp;\n","class DialogueBalloon {\n  constructor(classes) {\n    this.$element = $('<div></div>')\n      .addClass('balloon')\n      .addClass(classes);\n  }\n\n  show() {\n    this.cancelHide();\n    this.$element.addClass('visible');\n  }\n\n  hide() {\n    this.$element.addClass('fading');\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n    }\n    this.timeout = setTimeout(() => {\n      this.$element.removeClass('fading');\n      this.$element.removeClass('visible');\n      this.$element.removeClass('press-to-continue');\n    }, 250);\n  }\n\n  cancelHide() {\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n    }\n    this.$element.removeClass('fading');\n  }\n\n  showPressToContinue() {\n    this.$element.addClass('press-to-continue');\n  }\n\n  hidePressToContinue() {\n    this.$element.removeClass('press-to-continue');\n  }\n\n  empty() {\n    this.$element.empty();\n  }\n\n  append(element) {\n    this.$element.append(element);\n  }\n}\n\nmodule.exports = DialogueBalloon;\n","const LogicParser = require('./logic-parser');\n\n/**\n * An interface for the context object passed to the dialogue iterator.\n * @interface\n */\n// eslint-disable-next-line no-unused-vars\nclass DialogueIteratorContextInterface {\n  /**\n   * Returns a random number between 0 and max.\n   * @param {number} max\n   */\n  // eslint-disable-next-line no-unused-vars,class-methods-use-this\n  random(max) {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * Returns true if the specified flag is set.\n   *\n   * @param {string} flag\n   * @returns {boolean}\n   */\n  // eslint-disable-next-line no-unused-vars,class-methods-use-this\n  hasFlag(flag) {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * Sets the specified flag.\n   *\n   * @param {string} flag\n   * @returns {boolean}\n   */\n  // eslint-disable-next-line no-unused-vars,class-methods-use-this\n  setFlag(flag) {\n    throw new Error('Not implemented');\n  }\n}\n\n/**\n * Iterates through a dialogue tree.\n */\nclass DialogueIterator {\n  /**\n   * Creates a new iterator for the given dialogue.\n   *\n   * @param {Dialogue} dialogue\n   * @param {DialogueIteratorContextInterface} context\n   */\n  constructor(dialogue, context) {\n    this.dialogue = dialogue;\n    this.context = context;\n    this.conditionParser = new LogicParser(context);\n    this.reset();\n  }\n\n  /**\n   * Resets the iterator to the beginning of the dialogue.\n   */\n  reset() {\n    this.activeNode = this.dialogue.root;\n  }\n\n  /**\n   * Returns true if the iterator has reached the end of the dialogue.\n   * @returns {boolean}\n   */\n  isEnd() {\n    return this.activeNode === null;\n  }\n\n  /**\n   * Returns the current active node.\n   * @returns {*|null}\n   */\n  getActiveNode() {\n    return this.activeNode;\n  }\n\n  /**\n   * Returns responses in the current active node that have all their conditions met.\n   *\n   * @returns {Array|null}\n   */\n  getEnabledResponses() {\n    if (this.activeNode === null) {\n      return null;\n    }\n\n    if (!this.activeNode.responses) {\n      return null;\n    }\n\n    return this.activeNode.responses\n      .filter(response => !response.cond || this.conditionParser.evaluate(response.cond));\n  }\n\n  /**\n   * Returns the response with the given ID in the active node.\n   *\n   * @param {string} responseId\n   * @returns {Object|null}\n   */\n  getResponse(responseId) {\n    if (this.activeNode === null) {\n      return null;\n    }\n\n    if (!this.activeNode.responses) {\n      return null;\n    }\n\n    return this.activeNode.responsesById[responseId];\n  }\n\n  /**\n   * Advances the iterator to the next node.\n   *\n   * @throws Error if the active node type is unknown.\n   */\n  next() {\n    if (this.activeNode === null) {\n      return;\n    }\n\n    if (this.activeNode.responses && this.activeNode.responses.length > 0) {\n      throw new Error(`Can't use next() on a node of type 'statement' with responses (${this.activeNode.id}:${this.dialogue.root.id})`);\n    }\n\n    this.setFlags(this.activeNode.set);\n\n    let transitioned = false;\n    switch (this.activeNode.type) {\n      case 'statement':\n        transitioned = this.nextOnStatement();\n        break;\n      case 'root':\n      case 'first':\n        transitioned = this.nextOnFirst();\n        break;\n      case 'sequence':\n        transitioned = this.nextOnSequence();\n        break;\n      case 'random':\n        transitioned = this.nextOnRandom();\n        break;\n      default:\n        throw new Error(`Unknown node type: ${this.activeNode.type} (${this.activeNode.id}:${this.dialogue.root.id})`);\n    }\n    if (transitioned === false) {\n      transitioned = this.nextThroughParent();\n    }\n    if (transitioned === false) {\n      this.activeNode = null;\n    }\n  }\n\n  nextWithResponse(responseId) {\n    if (this.activeNode === null) {\n      return;\n    }\n\n    if (this.activeNode.responses === undefined) {\n      throw new Error(`Can't use nextWithResponse on a node without responses (${this.activeNode.type}:${this.dialogue.root.id})`);\n    }\n\n    const response = this.activeNode.responsesById[responseId];\n    if (!response) {\n      throw new Error(`Unknown response id: ${responseId} (${this.activeNode.id}:${this.dialogue.root.id})`);\n    }\n\n    this.setFlags(this.activeNode.set);\n    this.setFlags(response.set);\n    if (response.then) {\n      this.goTo(response.then);\n      return;\n    }\n\n    if (!this.nextOnStatement()) {\n      this.activeNode = null;\n    }\n  }\n\n  /**\n   * Jumps to a node identified by its id.\n   *\n   * @private\n   * @throws Error if the node id is not found.\n   * @param {string} nodeId\n   */\n  goTo(nodeId) {\n    const nextNode = this.dialogue.getNode(nodeId);\n    if (nextNode === undefined) {\n      throw new Error(`Can't find node id: ${nodeId} (active node = ${this.activeNode}:${this.dialogue.root.id})`);\n    }\n    this.activeNode = nextNode;\n  }\n\n  getEnabledItems(items) {\n    if (!items) return [];\n    return items.filter((item) => {\n      try {\n        return (item.cond === undefined || items.cond === null || item.cond.trim() === ''\n          || this.conditionParser.evaluate(item.cond));\n      } catch (e) {\n        throw new Error(`Error parsing condition: ${item.cond} (${this.activeNode.id}:${this.dialogue.root.id}): ${e.message}`);\n      }\n    });\n  }\n\n  setFlags(flags) {\n    if (!flags) return;\n    flags.forEach((flag) => {\n      this.context.setFlag(flag);\n    });\n  }\n\n  /**\n   * Jumps to the next node when the active node is of type 'first'\n   *\n   * @private\n   * @returns {boolean} true if the transition to the next node was successful.\n   */\n  nextOnFirst() {\n    const matchingItems = this.getEnabledItems(this.activeNode.items);\n    this.activeNode = matchingItems.length > 0 ? matchingItems[0] : null;\n    return true;\n  }\n\n  /**\n   * Jumps to the next node when the active node is of type 'sequence'\n   *\n   * @private\n   * @returns {boolean} true if the transition to the next node was successful.\n   */\n  nextOnSequence() {\n    const matchingItems = this.getEnabledItems(this.activeNode.items);\n    if (matchingItems.length > 0) {\n      [this.activeNode] = matchingItems;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Jumps to the next node when the active node is of type 'random'\n   *\n   * @private\n   * @returns {boolean} true if the transition to the next node was successful.\n   */\n  nextOnRandom() {\n    const matchingItems = this.getEnabledItems(this.activeNode.items);\n    if (matchingItems.length > 0) {\n      const index = this.context.random(matchingItems.length);\n      this.activeNode = matchingItems[index];\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Jumps to the next node when the active node is of type 'statement'\n   *\n   * @private\n   * @returns {boolean} true if the transition to the next node was successful.\n   */\n  nextOnStatement() {\n    if (this.activeNode.then) {\n      this.goTo(this.activeNode.then);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Jumps to the next node by traversing the parent nodes.\n   *\n   * @private\n   * @returns {boolean} true if the transition to the next node was successful.\n   */\n  nextThroughParent() {\n    let currentParent = this.activeNode.parent;\n    let currentChild = this.activeNode;\n    while (currentParent) {\n      if (currentParent.type === 'sequence') {\n        const matchingItems = this.getEnabledItems(currentParent.items);\n        const index = matchingItems.indexOf(currentChild);\n        if (index < matchingItems.length - 1) {\n          this.activeNode = matchingItems[index + 1];\n          return true;\n        }\n      }\n      if (currentParent.then) {\n        this.goTo(currentParent.then);\n        return true;\n      }\n      currentChild = currentParent;\n      currentParent = currentParent.parent;\n    }\n    return false;\n  }\n}\n\nmodule.exports = DialogueIterator;\n","const EventEmitter = require('events');\nconst DialogueBalloon = require('./dialogue-balloon');\nconst SpeechText = require('./speech-text');\n\nclass DialogueOverlay {\n  constructor(config) {\n    this.config = config;\n    this.events = new EventEmitter();\n\n    this.$element = $('<div></div>')\n      .addClass('dialogue-overlay');\n\n    this.balloonTop = new DialogueBalloon(['balloon-speech', 'top']);\n    this.$element.append(this.balloonTop.$element);\n\n    this.balloonBottom = new DialogueBalloon(['bottom']);\n    this.$element.append(this.balloonBottom.$element);\n\n    this.speechTop = new SpeechText();\n    this.balloonTop.append(this.speechTop.$element);\n    this.speechTop.events.on('complete', () => {\n      this.events.emit('speechComplete');\n    });\n\n    this.responseOptions = [];\n    this.selectedOption = 0;\n  }\n\n  play(dialogue) {\n\n  }\n\n  showSpeech(text) {\n    this.balloonTop.show();\n    this.hidePressToContinue();\n    this.speechTop.showText([{ string: text }]);\n  }\n\n  speedUpSpeech() {\n    this.speechTop.speedUp();\n  }\n\n  showResponseOptions(options) {\n    this.balloonBottom.empty();\n    this.balloonBottom.show();\n\n    this.selectedOption = 0;\n    this.responseOptions = Object.entries(options).map(([id, text], i) => ({\n      id,\n      text,\n      element: $('<div></div>')\n        .addClass('response-option')\n        .toggleClass('selected', i === this.selectedOption)\n        .append($('<span></span>').addClass('text').html(text))\n        .appendTo(this.balloonBottom.$element),\n    }));\n  }\n\n  hideSpeech() {\n    this.balloonTop.hide();\n  }\n\n  hideResponseOptions() {\n    this.balloonBottom.hide();\n  }\n\n  hide() {\n    this.hideSpeech();\n    this.hideResponseOptions();\n  }\n\n  selectResponseOption(index) {\n    this.selectedOption = Math.max(Math.min(index, this.responseOptions.length - 1), 0);\n    this.responseOptions.forEach((option, i) => option.element\n      .toggleClass('selected', i === this.selectedOption));\n  }\n\n  selectNextResponseOption() {\n    this.selectResponseOption(this.selectedOption + 1);\n  }\n\n  selectPreviousResponseOption() {\n    this.selectResponseOption(this.selectedOption - 1);\n  }\n\n  getSelectedResponseId() {\n    return this.responseOptions[this.selectedOption].id;\n  }\n\n  showPressToContinue() {\n    this.balloonTop.showPressToContinue();\n  }\n\n  hidePressToContinue() {\n    this.balloonTop.hidePressToContinue();\n  }\n}\n\nmodule.exports = DialogueOverlay;\n","export class DialogueSequencerState {\n  constructor(dialogueSequencer) {\n    this.dialogueSequencer = dialogueSequencer;\n    this.dialogueOverlay = dialogueSequencer.dialogueOverlay;\n    this.dialogueIterator = dialogueSequencer.dialogueIterator;\n    this.activeNode = this.dialogueIterator.getActiveNode();\n  }\n\n  onBegin() {\n\n  }\n\n  onAction() {\n\n  }\n}\n\nexport class DialogueSequencerThenTextState extends DialogueSequencerState {\n  constructor(dialogueSequencer, responseId) {\n    super(dialogueSequencer);\n    this.responseId = responseId;\n  }\n\n  onBegin() {\n    this.speechDone = false;\n    const response = this.dialogueIterator.getResponse(this.responseId);\n    this.dialogueOverlay.showSpeech(response.thenText);\n    this.dialogueOverlay.events.once('speechComplete', () => {\n      this.speechDone = true;\n      this.dialogueOverlay.showPressToContinue();\n    });\n  }\n\n  onAction() {\n    if (this.speechDone) {\n      this.dialogueOverlay.hideSpeech();\n      this.dialogueSequencer.endUi(this.responseId);\n    } else {\n      this.dialogueOverlay.speedUpSpeech();\n    }\n  }\n}\n\nexport class DialogueSequencerResponseState extends DialogueSequencerState {\n  constructor(dialogueSequencer) {\n    super(dialogueSequencer);\n    this.responses = this.dialogueIterator.getEnabledResponses();\n  }\n\n  onBegin() {\n    this.dialogueOverlay.showResponseOptions(\n      Object.fromEntries(this.responses.map((response) => [response.id, response.text]))\n    );\n  }\n\n  onAction() {\n    this.dialogueOverlay.hideResponseOptions();\n    this.dialogueOverlay.hideSpeech();\n    const responseId = this.dialogueOverlay.getSelectedResponseId();\n    const selectedResponse = this.dialogueIterator.getResponse(responseId);\n    if (selectedResponse.thenText) {\n      this.dialogueSequencer.setUiState(\n        new DialogueSequencerThenTextState(this.dialogueSequencer, responseId)\n      );\n    } else {\n      this.dialogueSequencer.endUi(responseId);\n    }\n  }\n}\n\nexport class DialogueSequencerTextState extends DialogueSequencerState {\n\n  onBegin() {\n    this.speechDone = false;\n    this.dialogueOverlay.showSpeech(this.activeNode.text);\n    this.dialogueOverlay.events.once('speechComplete', () => {\n      this.speechDone = true;\n      const responses = this.dialogueIterator.getEnabledResponses();\n      if (responses && responses.length > 0) {\n        this.dialogueSequencer.setUiState(\n          new DialogueSequencerResponseState(this.dialogueSequencer)\n        );\n      } else {\n        this.dialogueOverlay.showPressToContinue();\n      }\n    });\n  }\n\n  onAction() {\n    if (this.speechDone) {\n      this.dialogueOverlay.hideSpeech();\n      this.dialogueSequencer.endUi();\n    } else {\n      this.dialogueOverlay.speedUpSpeech();\n    }\n  }\n}\n","const EventEmitter = require('events');\nconst DialogueIterator = require('./dialogue-iterator');\nconst { DialogueSequencerTextState } = require('./dialogue-sequencer-states');\n\nclass DialogueSequencer {\n  constructor(dialogueOverlay) {\n    this.dialogueOverlay = dialogueOverlay;\n    this.dialogue = null;\n    this.dialogueIterator = null;\n    this.uiState = null;\n\n    this.events = new EventEmitter();\n  }\n\n  setUiState(state) {\n    this.uiState = state;\n    this.uiState.onBegin();\n  }\n\n  endUi(responseId = null) {\n    this.uiState = null;\n    if (responseId !== null) {\n      this.dialogueIterator.nextWithResponse(responseId);\n    } else {\n      this.dialogueIterator.next();\n    }\n    this.runUntilInteractivity();\n  }\n\n  play(dialogue) {\n    const flags = {};\n    this.dialogue = dialogue;\n    this.dialogueIterator = new DialogueIterator(dialogue, {\n      random: max => Math.floor(Math.random() * max),\n      hasFlag: flag => flags[flag] !== undefined,\n      setFlag: (flag) => { flags[flag] = true; return true; },\n    });\n    this.runUntilInteractivity();\n  }\n\n  runUntilInteractivity() {\n    const { dialogueIterator } = this;\n\n    if (!this.handledByUI(dialogueIterator.getActiveNode())) {\n      do {\n        dialogueIterator.next();\n      } while (!dialogueIterator.isEnd() && !this.handledByUI(dialogueIterator.getActiveNode()));\n    }\n\n    if (this.handledByUI(dialogueIterator.getActiveNode())) {\n      this.setUiState(new DialogueSequencerTextState(this));\n    } else {\n      this.onDialogueEnd();\n    }\n  }\n\n  onDialogueEnd() {\n    this.dialogueOverlay.hide();\n    this.events.emit('end');\n  }\n\n  action() {\n    if (this.uiState) {\n      this.uiState.onAction();\n    }\n  }\n\n  handledByUI(node) {\n    return node && node.type === 'statement';\n  }\n}\n\nmodule.exports = DialogueSequencer;\n","const { ExpressionParser } = require('expressionparser');\nconst DialogueSchema = require('../../../../specs/dialogue.schema.json');\n\nclass LogicParser {\n  constructor(context) {\n    this.context = context;\n\n    this.language = {\n      INFIX_OPS: {\n        // '<': (a, b) => (a() < b()),\n        // '>': (a, b) => (a() > b()),\n        // '=': (a, b) => (a() === b()),\n        // '!=': (a, b) => (a() !== b()),\n        // '>=': (a, b) => (a() >= b()),\n        // '<=': (a, b) => (a() <= b()),\n        '&': (a, b) => (a() && b()),\n        '|': (a, b) => (a() || b()),\n      },\n      PREFIX_OPS: {\n        '^': a => !a(),\n      },\n      AMBIGUOUS: {},\n      PRECEDENCE: [['^'], /* ['<', '>', '>=', '<='], ['=', '!='], */ ['&', '|']],\n      GROUP_OPEN: '(',\n      GROUP_CLOSE: ')',\n      SEPARATOR: ' ',\n      SYMBOLS: [/* '<', '>', '=', '!=', '>=', '<=', */'&', '|', '^', '(', ')'],\n      termDelegate: this.evaluateTerm.bind(this),\n      isCaseInsensitive: false,\n    };\n\n    this.parser = new ExpressionParser(this.language);\n  }\n\n  evaluate(expression) {\n    const stack = this.parser.expressionToRpn(expression);\n    const result = this.parser.rpnToValue(stack);\n    // return this.parser.expressionToValue(expression);\n    if (stack.length !== 0) {\n      throw new Error(`Unexpected token \"${stack[stack.length - 1]}\"`);\n    }\n    return result;\n  }\n\n  static isValidLiteral(term) {\n    return term[0] >= '0' && term[0] <= '9';\n  }\n\n  static isValidFlag(term) {\n    const regExp = new RegExp(DialogueSchema.definitions.flag_id.pattern);\n    return regExp.test(term);\n  }\n\n  evaluateTerm(term) {\n    if (LogicParser.isValidLiteral(term)) {\n      return parseInt(term, 10);\n    }\n    if (LogicParser.isValidFlag(term)) {\n      return this.context.hasFlag(term) || false;\n    }\n    throw new Error(`Invalid term: ${term}`);\n  }\n}\n\nmodule.exports = LogicParser;\n","/**\n * Copyright (c) 2023 by Drew Conley (https://codepen.io/punkydrewster713/pen/zYKdywP)\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software\n * and associated documentation files (the \"Software\"), to deal in the Software without restriction,\n * including without limitation the rights to use, copy, modify, merge, publish, distribute,\n * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all copies or\n * substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\n * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * Modified by Eric Londaits for IMAGINARY gGmbH.\n * Copyright (c) 2023 IMAGINARY gGmbH\n */\nconst EventEmitter = require('events');\n\nclass SpeechText {\n  constructor() {\n    this.$element = $('<div></div>')\n      .addClass('speech-text');\n\n    this.isSpace = /\\s/;\n    this.timedReveal = this.timedReveal.bind(this);\n    this.revealCharacterTimeout = null;\n    this.events = new EventEmitter();\n    this.speedFactor = 1;\n  }\n\n  /**\n   * Private method to reveal a character\n   *\n   * @private\n   * @param {Object} character\n   * @param {HTMLElement} character.span\n   * @param {Array} character.classes\n   */\n  revealCharacter(character) {\n    character.span.classList.add('revealed');\n    character.classes.forEach((c) => {\n      character.span.classList.add(c);\n    });\n  }\n\n  /**\n   * Private method to reveal a list of characters with a delay between each\n   *\n   * @private\n   * @param {Array} Array of characters with the following properties:\n   * - span {HTMLElement} The span element to be revealed\n   * - isSpace {Boolean} Whether or not the character is a space\n   * - delayAfter {Number} Delay after the character is revealed\n   * - classes {Array} Array of classes to be added to the character\n   * - stop {Boolean} Whether or not to stop after the character\n   */\n  timedReveal(list) {\n    const next = list.splice(0, 1)[0];\n    this.revealCharacter(next);\n    const delay = next.isSpace && !next.pause ? 0 : next.delayAfter;\n\n    if (list.length > 0) {\n      this.revealCharacterTimeout = setTimeout(() => {\n        this.timedReveal(list);\n      }, delay * this.speedFactor);\n    } else {\n      this.events.emit('complete');\n    }\n  }\n\n  /**\n   * Set the text to be displayed\n   *\n   * @param lines {Array} Array of objects with the following properties:\n   * - speed {Number} (optional) Speed of the text in milliseconds\n   * - string {String} Text to be displayed\n   * - classes {Array} (optional) Array of classes to be added to the text\n   * - stop {Boolean} (optional) Whether or not to stop after the line\n   */\n  showText(lines) {\n    this.clear();\n\n    this.characters = [];\n    lines.forEach((line, index) => {\n      if (index < lines.length - 1) {\n        line.string += ' '; // Add a space between lines\n      }\n      line.string.split('').forEach((character) => {\n        const span = document.createElement('span');\n        span.textContent = character;\n        this.$element.append(span);\n        this.characters.push({\n          span,\n          isSpace: this.isSpace.test(character) && !line.pause,\n          delayAfter: line.speed || SpeechText.Speeds.normal,\n          classes: line.classes || [],\n        });\n      });\n    });\n\n    this.resume();\n  }\n\n  /**\n   * Stop the reveal of the text\n   */\n  stop() {\n    clearTimeout(this.revealCharacterTimeout);\n    this.speedFactor = 1;\n  }\n\n  /**\n   * Resume the reveal of the text\n   */\n  resume() {\n    clearTimeout(this.revealCharacterTimeout);\n    this.revealCharacterTimeout = setTimeout(() => {\n      this.timedReveal(this.characters);\n    }, 600);\n  }\n\n  /**\n   * Clear the text\n   */\n  clear() {\n    this.stop();\n    this.$element.empty();\n  }\n\n  /**\n   * Reveal all characters immediately\n   */\n  revealAll() {\n    this.stop();\n    this.characters.forEach((c) => {\n      this.revealCharacter(c);\n    });\n    this.events.emit('complete');\n  }\n\n  speedUp() {\n    this.speedFactor = 0.2;\n  }\n}\n\nSpeechText.Speeds = {\n  pause: 500,\n  slow: 120,\n  normal: 60,\n  fast: 40,\n  superFast: 10,\n};\n\nmodule.exports = SpeechText;\n","/**\n * A jQuery plugin that resizes the given element to fit its parent element while\n * maintaining the specified aspect ratio.\n *\n * @param element {HTMLElement} The element to resize.\n * @param aspectRatio {number} The aspect ratio to keep.\n */\n(function ($) {\n  $.fn.fillWithAspect = function (aspectRatio) {\n    const $parent = this.parent();\n    const parentWidth = $parent.width();\n    const parentHeight = $parent.height();\n    const parentAspect = parentWidth / parentHeight;\n    if (parentAspect > aspectRatio) {\n      this.width(parentHeight * aspectRatio);\n      this.height(parentHeight);\n    } else {\n      this.width(parentWidth);\n      this.height(parentWidth / aspectRatio);\n    }\n\n    return this;\n  };\n}(jQuery));\n","/**\n * Based on https://github.com/mrdoob/stats.js\n * Copyright (c) 2009-2016 stats.js authors\n * Licensed under the The MIT License\n *\n * adapted by Eric Londaits for IMAGINARY gGmbH (c) 2023\n */\n\nconst PR = Math.round(window.devicePixelRatio || 1);\nconst WIDTH = 80 * PR;\nconst HEIGHT = 48 * PR;\nconst TEXT_X = 3 * PR;\nconst TEXT_Y = 2 * PR;\nconst GRAPH_X = 3 * PR;\nconst GRAPH_Y = 15 * PR;\nconst GRAPH_WIDTH = 74 * PR;\nconst GRAPH_HEIGHT = 30 * PR;\n\nclass Panel {\n  constructor(name, fg, bg) {\n    this.name = name;\n    this.fg = fg;\n    this.bg = bg;\n\n    this.min = Infinity;\n    this.max = 0;\n\n    this.canvas = document.createElement('canvas');\n    this.canvas.width = WIDTH;\n    this.canvas.height = HEIGHT;\n    this.canvas.style.cssText = 'width:80px;height:48px';\n\n    this.context = this.canvas.getContext('2d');\n    this.context.font = `bold ${9 * PR}px Helvetica,Arial,sans-serif`;\n    this.context.textBaseline = 'top';\n    this.context.fillStyle = this.bg;\n    this.context.fillRect(0, 0, WIDTH, HEIGHT);\n    this.context.fillStyle = this.fg;\n    this.context.fillText(this.name, TEXT_X, TEXT_Y);\n    this.context.fillRect(GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT);\n    this.context.fillStyle = this.bg;\n    this.context.globalAlpha = 0.9;\n    this.context.fillRect(GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT);\n\n    this.dom = this.canvas;\n  }\n\n  update(value, maxValue) {\n    this.min = Math.min(this.min, value);\n    this.max = Math.max(this.max, value);\n\n    this.context.fillStyle = this.bg;\n    this.context.globalAlpha = 1;\n    this.context.fillRect(0, 0, WIDTH, GRAPH_Y);\n    this.context.fillStyle = this.fg;\n    this.context.fillText(`${Math.round(value)} ${this.name} (${Math.round(this.min)}-${Math.round(this.max)})`,\n      TEXT_X,\n      TEXT_Y);\n\n    this.context.drawImage(this.canvas,\n      GRAPH_X + PR,\n      GRAPH_Y,\n      GRAPH_WIDTH - PR,\n      GRAPH_HEIGHT,\n      GRAPH_X,\n      GRAPH_Y,\n      GRAPH_WIDTH - PR,\n      GRAPH_HEIGHT);\n\n    this.context.fillRect(GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, GRAPH_HEIGHT);\n    this.context.fillStyle = this.bg;\n    this.context.globalAlpha = 0.9;\n    this.context.fillRect(GRAPH_X + GRAPH_WIDTH - PR,\n      GRAPH_Y,\n      PR,\n      Math.round((1 - (value / maxValue)) * GRAPH_HEIGHT));\n  }\n}\n\nclass Stats {\n  constructor() {\n    this.currentPanel = null;\n    this.container = document.createElement('div');\n    this.container.style.cssText = 'position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000';\n    this.container.addEventListener('click', (event) => {\n      event.preventDefault();\n      this.togglePanel(false);\n    });\n    this.dom = this.container;\n\n    this.beginTime = (performance || Date).now();\n    this.prevTime = this.beginTime;\n    this.frames = 0;\n\n    this.lastPingTime = (performance || Date).now();\n    this.maxPing = 0;\n    this.pingElapsedTime = 0;\n\n    this.panels = new Map();\n\n    this.fpsPanel = this.addPanel('fps', new Panel('fps', '#0ff', '#002'));\n    this.msPanel = this.addPanel('render', new Panel('ms', '#0f0', '#020'));\n    this.pingPanel = this.addPanel('ping', new Panel('ping', '#fffb13', '#020'));\n\n    this.showPanel(0);\n  }\n\n  addPanel(id, panel) {\n    this.panels.set(id, panel);\n    this.container.appendChild(panel.dom);\n    return panel;\n  }\n\n  showPanel(id = null) {\n    this.currentPanel = null;\n    Array.from(this.panels.entries())\n      .forEach(([panelId, panel], index) => {\n        if (panelId === id) {\n          panel.dom.style.display = 'block';\n          this.currentPanel = index;\n        } else {\n          panel.dom.style.display = 'none';\n        }\n      });\n  }\n\n  showPanelNumber(index = null) {\n    const panelId = Array.from(this.panels.keys())\n      .find((id, i) => i === index);\n    this.showPanel(panelId === undefined ? null : panelId);\n  }\n\n  togglePanel(hideAfterLast = true) {\n    if (this.currentPanel === null) {\n      this.currentPanel = 0;\n    } else {\n      this.currentPanel += 1;\n      if (this.currentPanel === this.container.children.length) {\n        this.currentPanel = hideAfterLast ? null : 0;\n      }\n    }\n    this.showPanelNumber(this.currentPanel);\n  }\n\n  frameBegin() {\n    this.beginTime = (performance || Date).now();\n  }\n\n  frameEnd() {\n    this.frames += 1;\n    const time = (performance || Date).now();\n    this.msPanel.update(time - this.beginTime, 200);\n\n    if (time >= this.prevTime + 1000) {\n      this.fpsPanel.update((this.frames * 1000) / (time - this.prevTime), 100);\n      this.prevTime = time;\n      this.frames = 0;\n    }\n    return time;\n  }\n\n  ping() {\n    const time = (performance || Date).now();\n    const ping = time - this.lastPingTime;\n    this.lastPingTime = time;\n    this.maxPing = Math.max(this.maxPing, ping);\n    this.pingElapsedTime += ping;\n    if (this.pingElapsedTime >= 1000) {\n      this.pingPanel.update(this.maxPing, 1000);\n      this.pingElapsedTime = 0;\n      this.maxPing = 0;\n    }\n  }\n\n  update() {\n    this.beginTime = this.frameEnd();\n  }\n}\n\nStats.Panel = Panel;\n\nmodule.exports = Stats;\n","function clone(object) {\n  return JSON.parse(JSON.stringify(object));\n}\n\nmodule.exports = clone;\n","const EventEmitter = require(\"events\");\n\n/**\n * Type of the {@link eventNames} list.\n *\n * @typedef {[\"up\", \"down\", \"left\", \"right\", \"action\", \"lang\"]} GamepadInputMgrEventNames\n */\n\n/**\n * @typedef {{axes?:{GamepadInputMgrEventNames:number},buttons?:{GamepadInputMgrEventNames:number}}} GamepadMapperConfig\n */\n\n/**\n * @typedef {{\"up\": boolean, \"down\": boolean, \"left\": boolean, \"right\": boolean, \"action\": boolean, \"lang\": boolean}} GamepadInputMgrState\n */\n\n/**\n * Names of events emitted by the gamepad input manager.\n * These identical to the fields in the gamepad mapper configuration.\n *\n * @type {GamepadInputMgrEventNames}\n */\nconst eventNames = [\"up\", \"down\", \"left\", \"right\", \"action\", \"lang\"];\n\n/**\n * Static gamepad configuration.\n * TODO: Make this configurable via the game config.\n *\n * @type {GamepadMapperConfig}\n */\nconst staticMapperConfig = {\n  axes: {\n    up: -1,\n    down: 1,\n    left: -0,\n    right: 0,\n  },\n  buttons: {\n    action: 1,\n    lang: 9,\n  },\n};\n\n/**\n * Up button event.\n *\n * @event GamepadInputMgr.events#up\n */\n\n/**\n * Down button event.\n *\n * @event GamepadInputMgr.events#down\n */\n\n/**\n * Left button event.\n *\n * @event GamepadInputMgr.events#left\n */\n\n/**\n * Right button event.\n *\n * @event GamepadInputMgr.events#right\n */\n\n/**\n * Action button event.\n *\n * @event GamepadInputMgr.events#action\n */\n\n/**\n * Language button event.\n *\n * @event GamepadInputMgr.events#lang\n */\n\n/**\n * Handles gamepad and joystick input from the first available device.\n */\nclass GamepadInputMgr {\n  constructor(config) {\n    this.config = config;\n    this.events = new EventEmitter();\n    this.mapper = new GamepadMapper(staticMapperConfig);\n    this.pressed = /** @type {GamepadInputMgrState} */ Object.fromEntries(\n      eventNames.map((e) => [e, false])\n    );\n    this.gamepadIndex = -1;\n    this.hasListenersAttached = false;\n    this.handleGamepadDisConnected = () => {\n      const gamepad = navigator.getGamepads().find((g) => g !== null);\n      if (typeof gamepad !== \"undefined\") {\n        console.log(`Using gamepad ${gamepad.index}: ${gamepad.id}`);\n        this.gamepadIndex = gamepad.index;\n      } else {\n        console.log(\"No gamepad connected\");\n        this.gamepadIndex = -1;\n      }\n    };\n  }\n\n  addListeners() {\n    if (this.hasListenersAttached) return;\n    window.addEventListener(\"gamepadconnected\", this.handleGamepadDisConnected);\n    window.addEventListener(\n      \"gamepaddisconnected\",\n      this.handleGamepadDisConnected\n    );\n    this.hasListenersAttached = true;\n    /**\n     * TODO: Deal with SecurityError from missing gamepad permission.\n     * TODO: Deal [missing secure context](https://github.com/w3c/gamepad/pull/120).\n     * TODO: Handle browsers that don't support gamepads.\n     * TODO: Emit warning when Gamepad API can not be used due the above reasons.\n     */\n  }\n\n  removeListeners() {\n    if (!this.hasListenersAttached) return;\n    window.removeEventListener(\n      \"gamepaddisconnected\",\n      this.handleGamepadDisConnected\n    );\n    this.hasListenersAttached = false;\n  }\n\n  getDirection() {\n    return {\n      x: (this.pressed.right ? 1 : 0) - (this.pressed.left ? 1 : 0),\n      y: (this.pressed.down ? 1 : 0) - (this.pressed.up ? 1 : 0),\n      action: this.pressed.action,\n      lang: this.pressed.lang,\n    };\n  }\n\n  /**\n   * Read the gamepad input and emit events\n   * @fires GamepadInputMgr.events#up\n   * @fires GamepadInputMgr.events#down\n   * @fires GamepadInputMgr.events#left\n   * @fires GamepadInputMgr.events#right\n   * @fires GamepadInputMgr.events#action\n   * @fires GamepadInputMgr.events#lang\n   */\n  update() {\n    const gamepad = navigator.getGamepads()[this.gamepadIndex] ?? null;\n    if (gamepad !== null && gamepad.connected) {\n      const prevPressed = { ...this.pressed };\n      const pressed = this.mapper.grab(gamepad);\n      const eventsToFire = eventNames.filter(\n        (n) => !prevPressed[n] && pressed[n]\n      );\n      this.pressed = pressed;\n      eventsToFire.forEach((n) => this.events.emit(n));\n    }\n  }\n}\n\n/**\n * Maps gamepad and joystick input to events.\n *\n * Different gamepads and joysticks have different mappings of buttons and axes.\n * This class maps the input to the standard representation corresponding to the events emitted by\n * {@link GamepadInputMgr.events}.\n */\nclass GamepadMapper {\n  /**\n   * Initilize the mapper with a configuration.\n   *\n   * @param {GamepadMapperConfig} config The configuration for mapping button pressed\n   *    and movement along axes to event names. If the same event name is mapped to an axis and a button, the axis takes\n   *    precedence.\n   */\n  constructor(config) {\n    this.config = config;\n\n    /**\n     * List of pairs of event name and corresponding function to grab the actual value from the gamepad while applying\n     * the mapping.\n     *\n     * @private {[[string,(gamepad:Gamepad) => boolean]]}\n     */\n    this.grabbers = eventNames.map((e) => [\n      e,\n      GamepadMapper.createGrabberForConfigKey(config, e),\n    ]);\n  }\n\n  /**\n   * Create function for grabbing the actual value from the gamepad while applying\n   * the mapping based on the internal config and the given event name.\n   *\n   * @param {GamepadMapperConfig} config The gamepad mapper configuration.\n   * @param {string} key The event name.\n   * @returns {(gamepad:Gamepad) => boolean}\n   */\n  static createGrabberForConfigKey(config, key) {\n    const fromAxis =\n      typeof config?.axes[key] !== \"undefined\"\n        ? GamepadMapper.createGrabberForAxis(config.axes[key])\n        : () => false;\n    const fromButton =\n      typeof config?.buttons[key] !== \"undefined\"\n        ? GamepadMapper.createGrabberForButton(config.buttons[key])\n        : () => false;\n    return (gamepad) => fromAxis(gamepad) || fromButton(gamepad);\n  }\n\n  /**\n   * Create function for grabbing the value from a gamepad axis.\n   *\n   * TODO: Add support for a customizable axis threshold.\n   *\n   * @param {number} signedIndex The index of the axis. Negative values are interpreted as the negative axis (including +0 and -0).\n   * @returns {(gamepad:Gamepad) => boolean}\n   */\n  static createGrabberForAxis(signedIndex) {\n    const index = Math.abs(signedIndex);\n    const threshold = 0.5;\n    // the division is intentional to distinguish between positive and negative zero (IEEE 754)\n    const sign = Math.sign(1.0 / signedIndex);\n    return (gamepad) => sign * gamepad.axes[index] >= threshold;\n  }\n\n  /**\n   * Create function for grabbing the value from a gamepad button.\n   *\n   * @param {number} index The index of the button.\n   * @returns {(gamepad:Gamepad) => boolean}\n   */\n  static createGrabberForButton(index) {\n    return (gamepad) => gamepad.buttons[index].pressed;\n  }\n\n  /**\n   *  Grab the input from the gamepad for all event names.\n   *\n   * @param {Gamepad} gamepad The gamepad to grab the input from. Must not be null.\n   * @returns {GamepadInputMgrState}\n   */\n  grab(gamepad) {\n    return /** @type {GamepadInputMgrState} */ Object.fromEntries(\n      this.grabbers.map(([key, grabber]) => [key, grabber(gamepad)])\n    );\n  }\n}\n\nmodule.exports = GamepadInputMgr;\n","const EventEmitter = require('events');\n\nclass KeyboardInputMgr {\n  constructor() {\n    this.events = new EventEmitter();\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleKeyUp = this.handleKeyUp.bind(this);\n    this.pressed = {\n      up: false,\n      down: false,\n      left: false,\n      right: false,\n    };\n    this.toggles = {};\n  }\n\n  addListeners() {\n    $(document).on('keydown', this.handleKeyDown);\n    $(document).on('keyup', this.handleKeyUp);\n  }\n\n  removeListeners() {\n    $(document).off('keydown', this.handleKeyDown);\n    $(document).off('keyup', this.handleKeyUp);\n  }\n\n  handleKeyDown(event) {\n    // Ignore repeated keydown events\n    if (event.originalEvent.repeat) {\n      return;\n    }\n    // Read the arrow keys and the spacebar\n    if (event.code === 'ArrowLeft') {\n      this.pressed.left = true;\n      this.events.emit('left');\n    } else if (event.code === 'ArrowUp') {\n      this.pressed.up = true;\n      this.events.emit('up');\n    } else if (event.code === 'ArrowRight') {\n      this.pressed.right = true;\n      this.events.emit('right');\n    } else if (event.code === 'ArrowDown') {\n      this.pressed.down = true;\n      this.events.emit('down');\n    } else if (event.code === 'Space') {\n      this.pressed.space = true;\n      this.events.emit('action');\n    } else if (this.toggles[event.code]) {\n      this.toggles[event.code]();\n    }\n  }\n\n  handleKeyUp(event) {\n    // Read the arrow keys\n    if (event.code === 'ArrowLeft') {\n      this.pressed.left = false;\n    } else if (event.code === 'ArrowUp') {\n      this.pressed.up = false;\n    } else if (event.code === 'ArrowRight') {\n      this.pressed.right = false;\n    } else if (event.code === 'ArrowDown') {\n      this.pressed.down = false;\n    } else if (event.code === 'Space') {\n      this.pressed.space = false;\n    }\n  }\n\n  getDirection() {\n    return {\n      x: (this.pressed.right ? 1 : 0) - (this.pressed.left ? 1 : 0),\n      y: (this.pressed.down ? 1 : 0) - (this.pressed.up ? 1 : 0),\n      action: this.pressed.space,\n    };\n  }\n\n  addToggle(code, callback) {\n    this.toggles[code] = callback;\n  }\n}\n\nmodule.exports = KeyboardInputMgr;\n","class DialogueOverlayConnection {\n  constructor(inputManager, dialogueOverlay, dialogueSequencer) {\n    this.inputManager = inputManager;\n    this.dialogueOverlay = dialogueOverlay;\n    this.dialogueSequencer = dialogueSequencer;\n\n    this.handleUp = this.handleUp.bind(this);\n    this.handleDown = this.handleDown.bind(this);\n    this.handleAction = this.handleAction.bind(this);\n  }\n\n  route() {\n    this.inputManager.events.on('down', this.handleDown);\n    this.inputManager.events.on('up', this.handleUp);\n    this.inputManager.events.on('action', this.handleAction);\n  }\n\n  unroute() {\n    this.inputManager.events.off('down', this.handleDown);\n    this.inputManager.events.off('up', this.handleUp);\n    this.inputManager.events.off('action', this.handleAction);\n  }\n\n  handleDown() {\n    this.dialogueOverlay.selectNextResponseOption();\n  }\n\n  handleUp() {\n    this.dialogueOverlay.selectPreviousResponseOption();\n  }\n\n  handleAction() {\n    this.dialogueSequencer.action();\n  }\n}\n\nclass PcMovementConnection {\n  constructor(inputManager, playerApp) {\n    this.inputManager = inputManager;\n    this.playerApp = playerApp;\n  }\n\n  route() {\n    this.playerApp.enablePcControl();\n  }\n\n  unroute() {\n    this.playerApp.disablePcControl();\n  }\n}\n\nmodule.exports = {\n  DialogueOverlayConnection,\n  PcMovementConnection,\n};\n","const { DialogueOverlayConnection, PcMovementConnection } = require('./player-app-input-connections');\n\nclass PlayerAppInputRouter {\n  constructor(inputManager) {\n    this.inputManager = inputManager;\n    this.currentConnection = null;\n  }\n\n  setConnection(connection) {\n    if (this.currentConnection) {\n      this.currentConnection.unroute();\n    }\n    this.currentConnection = connection;\n    this.currentConnection.route();\n  }\n\n  routeToPcMovement(playerApp) {\n    this.setConnection(new PcMovementConnection(this.inputManager, playerApp));\n  }\n\n  routeToDialogueOverlay(dialogueOverlay, dialogueSequencer) {\n    this.setConnection(new DialogueOverlayConnection(this.inputManager, dialogueOverlay, dialogueSequencer));\n  }\n}\n\nmodule.exports = PlayerAppInputRouter;\n","function showFatalError(text, error) {\n  $('<div></div>')\n    .addClass('fatal-error')\n    .append($('<div></div>')\n      .addClass('fatal-error-text')\n      .html(text))\n    .append($('<div></div>')\n      .addClass('fatal-error-details')\n      .html(error.message))\n    .appendTo('body');\n\n  $('html').addClass('with-fatal-error');\n}\n\nmodule.exports = showFatalError;\n","const clone = require('../helpers/clone');\n\nclass PlayerCharacter {\n  constructor(config, id) {\n    this.config = config;\n    this.id = id;\n    if (this.config.players[this.id] === undefined) {\n      throw new Error(`Attempted to initialize a player with id ${this.id}, which was not found in the config`);\n    }\n    this.props = clone(this.config.players[this.id]);\n\n    this.position = { x: 0, y: 0 };\n    this.speed = { x: 0, y: 0 };\n    this.direction = 'e';\n    this.setPosition(this.props.spawn.x, this.props.spawn.y);\n  }\n\n  setPosition(x, y) {\n    this.position.x = x;\n    this.position.y = y;\n  }\n\n  setSpeed(x, y) {\n    this.speed.x = x;\n    this.speed.y = y;\n  }\n\n  setDirection(direction) {\n    this.direction = direction;\n  }\n}\n\nmodule.exports = PlayerCharacter;\n","const icon = require('../../../../static/fa/broadcast-tower-solid.svg');\n\nclass ConnectionStateView {\n  constructor(connector) {\n    this.$element = $('<div></div>')\n      .addClass('connection-state-view');\n\n    this.$icon = $('<img>')\n      .attr('src', icon)\n      .addClass('connection-state-view-icon')\n      .appendTo(this.$element);\n\n    this.$errorMessage = $('<div></div>')\n      .addClass('connection-state-view-error text-danger')\n      .appendTo(this.$element);\n    this.$errorStatus = $('<div></div>')\n      .addClass('connection-state-view-status')\n      .appendTo(this.$element);\n\n    connector.events.on('closing', this.handleClosing.bind(this));\n    connector.events.on('disconnect', this.handleDisconnect.bind(this));\n    connector.events.on('connectWait', this.handleConnectWait.bind(this));\n    connector.events.on('connecting', this.handleConnecting.bind(this));\n    connector.events.on('connect', this.handleConnect.bind(this));\n  }\n\n  show() {\n    this.$element.addClass('visible');\n  }\n\n  hide() {\n    this.$element.removeClass('visible');\n  }\n\n  setErrorMessage(message) {\n    this.$errorMessage.html(message);\n  }\n\n  setErrorStatus(status) {\n    this.$errorStatus.html(status);\n  }\n\n  handleClosing() {\n    this.setErrorMessage('Retrying connection');\n    this.setErrorStatus('');\n    this.show();\n  }\n\n  handleDisconnect() {\n    this.setErrorMessage('Disconnected from server');\n    this.setErrorStatus('');\n    this.show();\n  }\n\n  handleConnectWait() {\n    this.setErrorStatus('Waiting to reconnect...');\n  }\n\n  handleConnecting() {\n    this.setErrorStatus('Connecting...');\n  }\n\n  handleConnect() {\n    this.hide();\n  }\n}\n\nmodule.exports = ConnectionStateView;\n","/* eslint-disable no-console */\nconst EventEmitter = require('events');\n\nconst PING_TIME = 1000 * 10;\nconst PONG_WAIT_TIME = 1000 * 10;\nconst RECONNECT_TIME = 1000 * 5;\n\nclass ServerSocketConnector {\n  constructor(uri) {\n    this.uri = uri;\n    this.ws = null;\n    this.connected = false;\n    // Must track isClosing because the socket might enter CLOSING state and not close immediately\n    this.isClosing = false;\n    this.events = new EventEmitter();\n    this.pingTimeout = null;\n    this.pongTimeout = null;\n    this.reconnectTimeout = null;\n    this.connect();\n  }\n\n  connect() {\n    this.cancelPing();\n    this.cancelReconnect();\n\n    this.events.emit('connecting');\n    console.log(`Connecting to ${this.uri}...`);\n    this.ws = new WebSocket(this.uri);\n    this.ws.onopen = this.handleOpen.bind(this);\n    this.ws.onclose = this.handleClose.bind(this);\n    this.ws.onmessage = this.handleMessage.bind(this);\n    // ws.onerror is not handled because the event gives no data about the\n    // error, and on a connection failure onclose will be called.\n\n    this.connected = false;\n  }\n\n  cancelReconnect() {\n    if (this.reconnectTimeout !== null) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = null;\n    }\n  }\n\n  reconnect() {\n    this.cancelReconnect();\n    this.reconnectTimeout = setTimeout(() => {\n      this.reconnectTimeout = null;\n      this.connect();\n    }, RECONNECT_TIME);\n    this.events.emit('connectWait');\n    console.log(`Will attempt to reconnect in ${RECONNECT_TIME / 1000} seconds...`);\n  }\n\n  handleOpen() {\n    this.cancelReconnect();\n    this.cancelPongTimeout();\n\n    this.connected = true;\n    this.isClosing = false;\n    console.log('Connected.');\n    this.events.emit('connect');\n    this.schedulePing();\n  }\n\n  handleClose(ev) {\n    this.connected = false;\n    this.isClosing = false;\n    this.cancelPing();\n    this.cancelPongTimeout();\n    // ev.code is defined here https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n    // but according to people the only code one normally gets is 1006 (Abnormal Closure)\n    console.error(\n      `Disconnected with code ${ev.code}`,\n      ev.code === 1006 ? ': Abnormal closure' : '',\n      ev.reason ? `(reason: ${ev.reason})` : ''\n    );\n    this.events.emit('disconnect');\n    this.reconnect();\n  }\n\n  handleMessage(ev) {\n    const message = JSON.parse(ev.data);\n    if (message.type === 'sync') {\n      this.handleSync(message);\n    } else if (message.type === 'pong') {\n      this.handlePong();\n    }\n  }\n\n  handleSync(message) {\n    this.events.emit('sync', message);\n  }\n\n  handlePong() {\n    this.cancelPongTimeout();\n    this.schedulePing();\n  }\n\n  send(data) {\n    const message = typeof data === 'string' ? { type: data } : data;\n    this.ws.send(JSON.stringify(message));\n  }\n\n  cancelPing() {\n    if (this.pingTimeout !== null) {\n      clearTimeout(this.pingTimeout);\n      this.pingTimeout = null;\n    }\n  }\n\n  schedulePing() {\n    this.cancelPing();\n    this.pingTimeout = setTimeout(() => {\n      this.pingTimeout = null;\n      this.ping();\n    }, PING_TIME);\n  }\n\n  cancelPongTimeout() {\n    if (this.pongTimeout !== null) {\n      clearTimeout(this.pongTimeout);\n      this.pongTimeout = null;\n    }\n  }\n\n  startPongTimeout() {\n    this.cancelPongTimeout();\n    this.pongTimeout = setTimeout(() => {\n      this.pongTimeout = null;\n      console.warn(`PONG not received after ${PONG_WAIT_TIME / 1000} seconds`);\n      console.warn('Closing connection');\n      if (!this.isClosing) {\n        this.isClosing = true;\n        this.events.emit('closing');\n      }\n      this.ws.close();\n    }, PONG_WAIT_TIME);\n  }\n\n  ping() {\n    this.send('ping');\n    this.startPongTimeout();\n  }\n\n  sync(player = null) {\n    const message = {\n      type: 'sync',\n    };\n    if (player !== null) {\n      message.players = Object.fromEntries([[player.id,\n        {\n          position: player.position,\n          speed: player.speed,\n        },\n      ]]);\n    }\n    this.send(message);\n  }\n}\n\nmodule.exports = ServerSocketConnector;\n","function withLeadingSlash(str) {\n  return str[0] === '/' ? str : `/${str}`;\n}\n\nfunction withTrailingSlash(str) {\n  return str[str.length - 1] === '/' ? str : `${str}/`;\n}\n\nfunction withTrailingColon(str) {\n  return str[str.length - 1] === ':' ? str : `${str}:`;\n}\n\nfunction getApiServerUrl() {\n  const protocol = withTrailingColon(process.env.API_SERVER_PROTOCOL || window.location.protocol);\n  const host = process.env.API_SERVER_HOST || window.location.hostname;\n  const port = process.env.API_SERVER_PORT || window.location.port;\n  const root = withTrailingSlash(withLeadingSlash(process.env.API_SERVER_ROOT || '/'));\n\n  return `${protocol}//${host}:${port}${root}`;\n}\n\nfunction getSocketServerUrl() {\n  const protocol = withTrailingColon(process.env.SOCKET_SERVER_PROTOCOL || 'ws');\n  const host = process.env.SOCKET_SERVER_HOST || window.location.hostname;\n  const port = process.env.SOCKET_SERVER_PORT || window.location.port;\n  const root = withTrailingSlash(withLeadingSlash(process.env.SOCKET_SERVER_ROOT || '/'));\n\n  return `${protocol}//${host}:${port}${root}`;\n}\n\nmodule.exports = {\n  getApiServerUrl,\n  getSocketServerUrl,\n};\n","/* globals PIXI */\n\nclass PCView {\n  constructor(config, textures, pc, townView) {\n    this.config = config;\n    this.textures = textures;\n    this.pc = pc;\n    this.townView = townView;\n    this.display = this.createSprite();\n    this.direction = 'e';\n    this.isWalking = false;\n  }\n\n  createSprite() {\n    const sprite = new PIXI.AnimatedSprite(this.textures['character-basic'].animations['basic-es']);\n    sprite.anchor.set(0, 0);\n    sprite.width = PCView.SPRITE_WIDTH;\n    sprite.height = PCView.SPRITE_HEIGHT;\n    sprite.animationSpeed = PCView.SPRITE_ANIMATION_SPEED;\n    sprite.play();\n    sprite.position = this.pc.position;\n\n    return sprite;\n  }\n\n  updateSprite(oldX, oldY, newX, newY) {\n    let updated = false;\n    let newDirection = this.direction;\n    let newIsWalking = this.isWalking;\n\n    if (newX > oldX) {\n      newDirection = 'e';\n    } else if (newX < oldX) {\n      newDirection = 'w';\n    } else if (newY > oldY) {\n      newDirection = 's';\n    } else if (newY < oldY) {\n      newDirection = 'n';\n    }\n\n    if (oldX !== newX || oldY !== newY) {\n      newIsWalking = true;\n    } else {\n      newIsWalking = false;\n    }\n\n    if (newDirection !== this.direction || newIsWalking !== this.isWalking) {\n      const action = newIsWalking ? 'w' : 's';\n      this.display.textures = this.textures['character-basic'].animations[`basic-${newDirection}${action}`];\n      this.display.play();\n      this.direction = newDirection;\n      this.isWalking = newIsWalking;\n    }\n  }\n\n  animate(time) {\n    const townDisplay = this.townView.display;\n    let newX;\n    let newY;\n    let furthestX = this.pc.position.x + this.pc.speed.x * time;\n    let furthestY = this.pc.position.y + this.pc.speed.y * time;\n\n    // Clamp the position to the town's bounds\n    furthestX = Math.max(0, Math.min(furthestX, townDisplay.width - this.display.width));\n    furthestY = Math.max(0, Math.min(furthestY, townDisplay.height - this.display.height));\n\n    // Collisions are checked on a per-pixel basis, so we only need to check\n    // if the player has moved to a new pixel\n    if (Math.floor(furthestX) !== Math.floor(this.pc.position.x)\n      || Math.floor(furthestY) !== Math.floor(this.pc.position.y)) {\n      // Check for collisions\n      const collisionPoints = this.collisionPoints();\n      newX = this.pc.position.x;\n      newY = this.pc.position.y;\n      const deltaX = furthestX - this.pc.position.x;\n      const deltaY = furthestY - this.pc.position.y;\n      const steps = Math.max(Math.abs(deltaX), Math.abs(deltaY));\n      const stepX = deltaX / steps;\n      const stepY = deltaY / steps;\n      let collidedX = false;\n      let collidedY = false;\n      for (let i = 0; !(collidedX && collidedY) && i < steps; i += 1) {\n        const candidateX = newX + stepX;\n        const candidateY = newY + stepY;\n        for (let j = 0; !(collidedX && collidedY) && j < collisionPoints.length; j += 1) {\n          if (!this.townView.isWalkable(\n            Math.floor(newX + collisionPoints[j].x),\n            Math.floor(candidateY + collisionPoints[j].y)\n          )) {\n            collidedY = true;\n          }\n          if (!this.townView.isWalkable(\n            Math.floor(candidateX + collisionPoints[j].x),\n            Math.floor(newY + collisionPoints[j].y)\n          )) {\n            collidedX = true;\n          }\n          if (!collidedX && !collidedY && !this.townView.isWalkable(\n            Math.floor(candidateX + collisionPoints[j].x),\n            Math.floor(candidateY + collisionPoints[j].y)\n          )) {\n            collidedX = true;\n            collidedY = true;\n          }\n        }\n        newX = collidedX ? newX : candidateX;\n        newY = collidedY ? newY : candidateY;\n      }\n    } else {\n      newX = furthestX;\n      newY = furthestY;\n    }\n\n    this.updateSprite(this.pc.position.x, this.pc.position.y, newX, newY);\n    this.pc.setPosition(newX, newY);\n    this.display.position = this.pc.position;\n    this.display.zIndex = this.pc.position.y;\n  }\n\n  collisionPoints() {\n    // The collisions are only checked for two points at the baseline of the PC,\n    return [\n      {\n        x: 0,\n        y: this.display.height,\n      },\n      {\n        x: this.display.width,\n        y: this.display.height,\n      },\n    ];\n  }\n}\n\nPCView.SPRITE_HEIGHT = 156;\nPCView.SPRITE_WIDTH = 72;\nPCView.SPRITE_ANIMATION_SPEED = 0.3;\n\nmodule.exports = PCView;\n","/* globals PIXI */\nclass TownView {\n  constructor(config, textures) {\n    this.config = config;\n    this.textures = textures;\n    this.display = new PIXI.Container();\n    this.bgLayer = new PIXI.Container();\n    this.mainLayer = new PIXI.Container();\n    this.display.addChild(this.bgLayer);\n    this.display.addChild(this.mainLayer);\n\n    // Temporary initialization\n    this.townSize = {\n      width: 1024 * 8,\n      height: 768 * 6,\n    };\n\n    this.background = PIXI.Sprite.from(this.textures['town-bg']);\n    this.background.width = this.townSize.width;\n    this.background.height = this.townSize.height;\n    this.bgLayer.addChild(this.background);\n\n    this.collisionRenderer = new PIXI.CanvasRenderer({\n      width: this.townSize.width, height: this.townSize.height,\n    });\n    this.collisionTree = new PIXI.Container();\n    this.baseCollisionMap = PIXI.Sprite.from(this.textures['town-collmap']);\n    this.baseCollisionMap.width = this.townSize.width;\n    this.baseCollisionMap.height = this.townSize.height;\n    this.collisionTree.addChild(this.baseCollisionMap);\n    this.collisionTree.renderCanvas(this.collisionRenderer);\n    this.collisionMap = this.collisionRenderer.view\n      .getContext('2d')\n      .getImageData(0, 0, this.townSize.width, this.townSize.height).data;\n\n    window.isWalkable = this.isWalkable.bind(this);\n    window.collMap = this.collisionMap;\n  }\n\n  async loadAssets() {\n    this.assets = await PIXI.Assets.load();\n  }\n\n  isWalkable(x, y) {\n    // todo: make a map that's 1byte per pixel instead of 4\n    return this.collisionMap[y * this.townSize.width * 4 + x * 4] == 0;\n  }\n}\n\nmodule.exports = TownView;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","const ServerSocketConnector = require('./lib/net/server-socket-connector');\nconst ConnectionStateView = require('./lib/net/connection-state-view');\nconst showFatalError = require('./lib/loader/show-fatal-error');\nrequire('../sass/default.scss');\nconst PlayerApp = require('./lib/components/player-app');\nconst { getApiServerUrl, getSocketServerUrl } = require('./lib/net/server-url');\n\nconst urlParams = new URLSearchParams(window.location.search);\nconst playerId = urlParams.get('p') || '1';\nconst statsPanel = urlParams.get('s') || null;\nconst configUrl = `${getApiServerUrl()}config`;\n\nfetch(configUrl, { cache: 'no-store' })\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`HTTP error. Status: ${ response.status }`);\n    }\n    return response.json();\n  })\n  .catch((err) => {\n    console.log(err);\n    showFatalError(`Error fetching configuration from ${configUrl}`, err);\n    console.error(`Error fetching configuration from ${configUrl}`);\n    throw err;\n  })\n  .then((config) => {\n    const playerApp = new PlayerApp(config, playerId);\n    return playerApp.init();\n  })\n  .then((playerApp) => {\n    $('[data-component=\"PlayerApp\"]').replaceWith(playerApp.$element);\n    playerApp.resize();\n    $(window).on('resize', () => {\n      playerApp.resize();\n    });\n\n    let syncReceived = false;\n    const connector = new ServerSocketConnector(getSocketServerUrl());\n    connector.events.on('connect', () => {\n      syncReceived = true;\n    });\n    connector.events.on('sync', (message) => {\n      syncReceived = true;\n      playerApp.stats.ping();\n      Object.entries(message.players).forEach(([id, player]) => {\n        if (id !== playerId && playerApp.otherPcs[id]) {\n          if (player.position) {\n            playerApp.otherPcs[id].setPosition(player.position.x, player.position.y);\n          }\n          if (player.speed) {\n            playerApp.otherPcs[id].setSpeed(player.speed.x, player.speed.y);\n          }\n        }\n      });\n    });\n    playerApp.pixiApp.ticker.add(() => {\n      if (syncReceived) {\n        connector.sync(playerApp.pc);\n        syncReceived = false;\n      }\n    });\n    const connStateView = new ConnectionStateView(connector);\n    $('body').append(connStateView.$element);\n\n    if (statsPanel) {\n      playerApp.stats.showPanel(statsPanel);\n    }\n  })\n  .catch((err) => {\n    console.error(err);\n  });\n"],"names":[],"sourceRoot":""}